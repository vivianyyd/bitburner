{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":674,\"hp\":25,\"max_hp\":25,\"strength\":159,\"defense\":159,\"dexterity\":160,\"agility\":160,\"charisma\":109,\"intelligence\":0,\"hacking_chance_mult\":1.0510100501,\"hacking_speed_mult\":1.0825403516029999,\"hacking_money_mult\":1.0510100501,\"hacking_grow_mult\":1.0510100501,\"hacking_exp\":265469530022.78864,\"strength_exp\":58336.05373574552,\"defense_exp\":58192.88094268118,\"dexterity_exp\":60122.430293663216,\"agility_exp\":60053.063630357115,\"charisma_exp\":12798.380371066716,\"intelligence_exp\":0,\"hacking_mult\":1.0510100501,\"strength_mult\":1.0510100501,\"defense_mult\":1.0510100501,\"dexterity_mult\":1.0510100501,\"agility_mult\":1.0510100501,\"charisma_mult\":1.0510100501,\"hacking_exp_mult\":1.15611105511,\"strength_exp_mult\":1.15611105511,\"defense_exp_mult\":1.15611105511,\"dexterity_exp_mult\":1.15611105511,\"agility_exp_mult\":1.15611105511,\"charisma_exp_mult\":1.15611105511,\"company_rep_mult\":1.0510100501,\"faction_rep_mult\":1.0510100501,\"money\":851038150468.0713,\"city\":\"Aevum\",\"location\":\"Aevum Police Headquarters\",\"jobs\":{\"Joe's Guns\":\"Employee\",\"Blade Industries\":\"Software Engineering Intern\",\"NetLink Technologies\":\"Software Engineering Intern\",\"Aevum Police Headquarters\":\"Security Guard\",\"Clarke Incorporated\":\"Software Engineering Intern\",\"Galactic Cybersystems\":\"Software Consultant\",\"ECorp\":\"Software Engineering Intern\",\"Bachman & Associates\":\"Software Engineering Intern\",\"AeroCorp\":\"Software Engineering Intern\",\"Rho Construction\":\"Software Engineering Intern\",\"Watchdog Security\":\"Software Engineering Intern\"},\"companyName\":\"Aevum Police Headquarters\",\"currentServer\":\"home\",\"purchasedServers\":[\"home-0\",\"home-1\",\"home-2\",\"home-3\",\"home-4\",\"home-5\",\"home-6\",\"home-7\",\"home-8\",\"home-9\",\"home-10\",\"home-11\",\"home-12\",\"home-13\",\"home-14\",\"home-15\",\"home-16\",\"home-17\",\"home-18\",\"home-19\",\"home-20\",\"home-21\",\"home-22\",\"home-23\",\"home-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":332421.60000524647,\"ram\":64,\"totalMoneyGenerated\":3068985189.9653516,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":332420.8000052464,\"ram\":64,\"totalMoneyGenerated\":3069004384.8572063,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":332420.6000052464,\"ram\":64,\"totalMoneyGenerated\":3068949033.1337066,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":331117.40000517067,\"ram\":64,\"totalMoneyGenerated\":3039942593.5301237,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":331117.2000051707,\"ram\":64,\"totalMoneyGenerated\":3039719891.1199703,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":331116.8000051707,\"ram\":64,\"totalMoneyGenerated\":3039763733.846283,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299533.0000048884,\"ram\":64,\"totalMoneyGenerated\":2887193620.894617,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299533.0000048884,\"ram\":64,\"totalMoneyGenerated\":2887166635.7220254,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299532.8000048884,\"ram\":64,\"totalMoneyGenerated\":2887144819.5332227,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299515.40000488714,\"ram\":64,\"totalMoneyGenerated\":2887008144.242764,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299515.2000048871,\"ram\":64,\"totalMoneyGenerated\":2886989213.7805815,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299515.0000048871,\"ram\":64,\"totalMoneyGenerated\":2886967523.0823784,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299500.000004886,\"ram\":64,\"totalMoneyGenerated\":2886896118.7332163,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299499.800004886,\"ram\":64,\"totalMoneyGenerated\":2886874978.5276055,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299499.800004886,\"ram\":64,\"totalMoneyGenerated\":2886852336.1269608,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299488.8000048852,\"ram\":64,\"totalMoneyGenerated\":2886780513.0818677,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299488.6000048852,\"ram\":64,\"totalMoneyGenerated\":2886759797.878248,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299488.6000048852,\"ram\":64,\"totalMoneyGenerated\":2886740035.0076766,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299471.60000488395,\"ram\":64,\"totalMoneyGenerated\":2886591589.7576647,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299471.4000048839,\"ram\":64,\"totalMoneyGenerated\":2886567019.529389,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299471.2000048839,\"ram\":64,\"totalMoneyGenerated\":2886547193.5982146,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299471.00000488386,\"ram\":64,\"totalMoneyGenerated\":2886522135.622648,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299470.8000048839,\"ram\":64,\"totalMoneyGenerated\":2886493835.8603163,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9639.138155093886,\"onlineTimeSeconds\":299470.60000488383,\"ram\":64,\"totalMoneyGenerated\":2886468777.8847494,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\",\"Sector-12\",\"NiteSec\",\"Slum Snakes\",\"The Black Hand\",\"Aevum\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"}],\"augmentations\":[{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"}],\"sourceFiles\":[],\"numPeopleKilled\":5,\"karma\":-92.9,\"crime_money_mult\":1.0510100501,\"crime_success_mult\":1.0510100501,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":0.9,\"workExpMult\":1,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.1734166582665,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.7338098271846913,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":19667.42599732008,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":82968.58786262077,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":28352000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0510100501,\"hacknet_node_money_mult\":1.0510100501,\"hacknet_node_purchase_cost_mult\":0.9509900498999999,\"hacknet_node_ram_cost_mult\":0.9509900498999999,\"hacknet_node_core_cost_mult\":0.9509900498999999,\"hacknet_node_level_cost_mult\":0.9509900498999999,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643290530363,\"totalPlaytime\":572856200,\"playtimeSinceLastAug\":336189800,\"playtimeSinceLastBitnode\":572856200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4100,\"class\":-14623.200000000164,\"codingcontract\":0,\"corporation\":0,\"crime\":11936321.138985721,\"gang\":0,\"hacking\":5490671496280.3545,\"hacknet\":70288929103.20087,\"hacknet_expenses\":-12228823765.69875,\"hospitalization\":-20909000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":851038149468.0713,\"work\":23654892.229058515,\"servers\":-1526159360000,\"other\":-305400000,\"augmentations\":-3171243355780.0947}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4100,\"class\":-226087.20000000394,\"codingcontract\":0,\"corporation\":0,\"crime\":21068321.138985645,\"gang\":0,\"hacking\":5490802103424.506,\"hacknet\":85133230465.90213,\"hacknet_expenses\":-18797798977.815075,\"hospitalization\":-20909000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":851094848776.2383,\"work\":47302435.42906775,\"servers\":-1534124349959.7224,\"other\":-305400000,\"augmentations\":-3171660167871.291}},\"scriptProdSinceLastAug\":5484326345035.095,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642718403825},{\"ID\":\"NS2\",\"unlockedOn\":1642730397972},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642730697989},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642731237982},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642731357982},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642731477983},{\"ID\":\"FROZE\",\"unlockedOn\":1642732621986},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642741062790},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642821926194},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642826815199},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642954358183},{\"ID\":\"TOR\",\"unlockedOn\":1642960788527},{\"ID\":\"NITESEC\",\"unlockedOn\":1642969225045},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642969585065},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642988865461},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642989945472},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642995909249},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643029786115},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643029786128},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643086139759},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643208492687}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"63.1.5.9\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[19471365180,3195,4047,2982]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":239629.7823550346,\"onlineMoneyMade\":19471365180,\"onlineRunningTime\":68411.20999994034,\"pid\":2275,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":213,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///91e50595-3aa9-4c83-9eed-1c546c7a6e21\",\"moduleSequenceNumber\":313572}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///91e50595-3aa9-4c83-9eed-1c546c7a6e21\",\"moduleSequenceNumber\":313572}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":313572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///d20cfbf7-92e2-4791-bfa1-94dc9ef39a24\",\"moduleSequenceNumber\":1048989}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":1048989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///a192bae8-1a65-49bc-a14f-b23804ff3833\",\"moduleSequenceNumber\":452647}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"moduleSequenceNumber\":452647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Prints the cost of purchasing a server with every option of RAM.\\n**/\\nexport async function main(ns) {\\n\\tfor (var i=0; i <= 20; i++){\\n\\t\\tns.tprint('RAM: ', Math.pow(2, i), '\\\\tCost: ', ns.getPurchasedServerCost(Math.pow(2, i)));\\n\\t}\\n}\",\"filename\":\"servercost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"servercost.js\",\"url\":\"blob:file:///65d9f09f-f47d-4297-bc6d-3e34296dd3e1\",\"moduleSequenceNumber\":93632}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Ensures the user has at least [numservs] servers of RAM at least [ram], purchasing servers as necessary when possible. \\n**/\\nexport async function main(ns) {  // modify first two lines\\n\\tvar ram = Math.pow(2, 20);  // 13, 18, 20\\n\\tvar numservs = 25;\\n\\n\\tvar i = 0;\\n\\twhile (i < numservs) {\\n\\t\\tvar name = 'home-' + i;\\n\\t\\tlet replacing = ns.serverExists(name);\\n\\t\\tlet baby = '';\\n\\t\\tif (replacing) {\\n\\t\\t\\tif (ns.getServerMaxRam(name) >= ram) {  // do not delete\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\telse if (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\t\\tns.killall(name);\\n\\t\\t\\t\\tns.deleteServer(name);\\n\\t\\t\\t\\tbaby = ns.purchaseServer(baby, ram);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\t\\tbaby = ns.purchaseServer(name, ram);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (baby.length > 0) {  // successfully purchased\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], baby);\\n\\t\\t\\tns.exec('leaf.js', baby, 1, baby);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000 * 60);\\n\\t}\\n}\",\"filename\":\"buyservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buyservs.js\",\"url\":\"blob:file:///9c96cb29-85cc-4ef2-a904-2a1a58faf4f1\",\"moduleSequenceNumber\":851392}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":853703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\tns.connect(child);\\n\\t\\tns.installBackdoor();\\n\\t}\\n}\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///d6d5cc1d-065c-4409-8baa-2ca9cda40a44\",\"moduleSequenceNumber\":11527}],\"dependents\":[],\"ramUsage\":65.8,\"server\":\"home\",\"moduleSequenceNumber\":377757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\t\\tns.run('stats.js', 1, child, name);\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///67489afa-a895-4b20-acd9-e01feb885564\",\"moduleSequenceNumber\":373667}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":375031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.getServerMaxRam('asdf'));\\n\\n\\t// var ram = Math.pow(2, 20);  // 13, 18, 20\\n\\t// var i = 6;\\n\\t// // leave these lines uncommented if there already exist all 25 servers\\n\\t// ns.killall('home-' + i);\\n\\t// ns.deleteServer('home-' + i);\\n\\t// var baby = ns.purchaseServer('home-' + i, ram);\\n}\",\"filename\":\"tmp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tmp.js\",\"url\":\"blob:file:///4655f350-e12e-464d-849e-09976b22594c\",\"moduleSequenceNumber\":398882}],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":398882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Cheeses hacking xp on $1 purchased home servers.\\n**/\\nexport async function main(ns) {\\n\\tif (ns.args.length < 1){\\n\\t\\tns.tprint('Use `run homexp.js [n]` to cheese hacking XP on [n] purchased home servers.')\\n\\t}\\n\\tvar numservers = ns.args[0];\\n\\tfor (var i = 0; i < numservers; i++) {\\n\\t\\tvar serv = 'home-' + i;\\n\\t\\tns.killall(serv);\\n\\t\\tvar threads = Math.floor(ns.getServerMaxRam(serv) / 1.75);\\n\\t\\tns.exec('weak.js', serv, threads);\\n\\t}\\n}\",\"filename\":\"homexp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"homexp.js\",\"url\":\"blob:file:///d74010d8-ff6f-4520-b81d-cbd2ceca945d\",\"moduleSequenceNumber\":858674}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"home\",\"moduleSequenceNumber\":865077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"home-0\",\"home-1\",\"home-2\",\"home-3\",\"home-4\",\"home-5\",\"home-6\",\"home-7\",\"home-8\",\"home-9\",\"home-10\",\"home-11\",\"home-12\",\"home-13\",\"home-14\",\"home-15\",\"home-16\",\"home-17\",\"home-18\",\"home-19\",\"home-20\",\"home-21\",\"home-22\",\"home-23\",\"home-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"notes.txt\",\"text\":\"TODO\\n\\tIN PROGRESS > NEXT STEPS\\n\\t\\tnone\\n\\n\\tSCRIPT MODIFICATIONS\\n\\t\\tmodify branch to continue to children of a node whose hack skill is too high by scp-ing from grandparent to child in catch block\\n\\t\\twrite script to run weak.js on all it can access \\n\\t\\t\\trun weak.js -t 599186 (ram/1.75) to cheese hacking exp\\n\\t\\twrite error messages for arg usage of all scripts \\n\\t\\twrite docs for all scripts\\n\\t\\tautomate the selection of target servers by target.js\\n\\t\\tautomate purchasing port breaking execs, rerunning start command\\n\\t\\twrite script to auto backup to git\\n\\t\\tcreate directories\\n\\nACTIVE TASKS\\n\\tcrime\\n\\tcoding contracts\\n\\tmod scripts \\n\\nPASSIVE TASKS\\n\\tcreate program\\n\\tfaction work > favor & augmentations\\n\\nGREATER GOALS\\n\\tinstall augs \\n\\tup combat stats > infiltrate companies\\n\\t\\tcontract security for sector-12\\n\\nAFTER CREATING PORT-OPENING PROGRAM\\n\\tadd to setup, restart scripts\\n\\tbackdoor newly accessible servers \\n\\nBEFORE AUGMENTATION INSTALL\\n\\tpurchase as many augmentations as possible\\n\\tpurchase as many home buffs as possible\\n\\tbackup augs \\n\\tdownload scripts \\n\\nAFTER AUGMENTATION INSTALL \\n\\tbuy possible port breaking execs\\n\\tcheese hacking exp\\n\\trun hackgw on joesguns from all computers for $\\n\\tmodify setup and stats to include owned execs \\n\\trun start \\n\\tdecide size/num servs to buy \\n\\tbackdoor all reachable servers \\n\\nROLLING OUT CHANGES\\n\\t`start` aliased to `run setup.js home home;run spawn.js home catalyst`\\n\\nCONTROL FLOW:\\n\\tbranch > leaf > hackgw\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":6.536000000000003,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-808170.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,1,4,7,-9,-8,7,1,-4,-1,-6,-7,-2,5,9,9,-7,-7,0,-6,4,1,-7,10,-10,1,6,10,5,-10,9,-9,-9,-1,-4,-10,3,9,0,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92514.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"235241118100\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"74.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67864330642,\"moneyMax\":1696608266050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1248,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644818.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9275987\",-64],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76885.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0,1,0,0,0],[0,0,1,1,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-648832-ECorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":28,\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"67.1.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":41547984225,\"moneyMax\":1038699605625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1254,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-126759.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[7,8],[4,2,6],[3,6,2,9],[4,5,5,5,6],[9,7,2,2,2,9],[7,8,6,3,1,9,1],[5,4,3,4,9,7,7,3],[9,8,1,3,8,9,4,2,1],[5,9,7,4,5,9,9,1,9,2],[4,1,7,3,4,9,8,8,5,9,9]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509902-Aevum.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8538194\",45],\"reward\":{\"name\":\"Aevum\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92772-GalacticCybersystems.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0],[0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,1,1,0,0,0],[0,0,0,1,0,0,1,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"Galactic Cybersystems\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"88.0.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":22041921599,\"moneyMax\":551048039975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1134,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367211.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(a()a()(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-483435-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[63,4,123,109,146,79,200,72,119,108,43,143,35,27,124,186,49,149,102,144,38,127,112,46,90,16,10,86,70,34,8,100,83,98,127,156,71,91,50,129,162,142],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-228377-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[74,144,88,106,152,36,153,95,10,134,42,154,168,126,103,119,143,185,134,19,126,146,79,169,100,165,23,73,35,176,58,110,124,5,156,6,46,187,82,108,25],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464294.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,1],[0,0,1,0,0,1,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[1,0,0,0,1,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"22.6.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":30996382028,\"moneyMax\":774909550700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1078,\"serverGrowth\":65}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-723510.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":280156011,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"67.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27339884831,\"moneyMax\":683497120775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814783-WatchdogSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,7],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-949977-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"983911199\",76],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474971.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":284705416,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"17.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":15527975852,\"moneyMax\":388199396300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1174,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886992-BladeIndustries.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[3,5],[1,6,2],[9,9,4,8],[9,7,2,4,6],[4,6,4,5,8,9],[4,8,3,9,8,8,1],[4,6,9,8,5,1,9,4],[7,1,4,9,3,4,4,5,1],[8,9,3,4,1,9,5,8,2,7],[4,6,3,6,5,6,1,3,9,3,7]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-458024-TheBlackHand.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"211166150128\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"57.4.4.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":21871876394,\"moneyMax\":546796909850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":24382715239,\"moneyMax\":609567880975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-470080.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":437205954,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-284308-Aevum.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[28,75,59,131,138,162,164,166,163,44,85,29,155,10,147,160,14,95,87,46,146,43,197,185,33,191,7,164],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"15.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":25967242395,\"moneyMax\":649181059875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1257,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32561.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[6,4],[2,7,5],[1,4,1,4],[2,1,2,7,3],[9,3,7,3,6,4]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"94.6.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1552653235,\"moneyMax\":38816330875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1114,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-2330.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":856968996,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"67.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1554,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"36.1.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1132621988,\"moneyMax\":28315549700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1037,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-53078.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"902115\",-70],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"6.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":366830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":366831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":313416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":313417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":366833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":453021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":1048944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":902322269,\"moneyMax\":22558056725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":72}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638996-BladeIndustries.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":668517658,\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-961449-AeroCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[1,0]],\"reward\":{\"name\":\"AeroCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"37.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":366837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":366838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":313430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":313431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":366841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":453029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":1048948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":846549044,\"moneyMax\":21163726100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-147340.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[184,31,140,34,69,127,143,87,120,121],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106916.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"748523248192\",66],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"14.4.4.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":720291123,\"moneyMax\":18007278075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"39.1.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":748477780,\"moneyMax\":18711944500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-62063-AeroCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,0,1,1,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,1,0],[0,0,0,1,0,0,1],[1,1,1,0,0,0,0]],\"reward\":{\"name\":\"AeroCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"31.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"icarus\",\"moduleSequenceNumber\":366820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"icarus\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"icarus\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"icarus\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"icarus\",\"moduleSequenceNumber\":366821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"icarus\",\"moduleSequenceNumber\":313400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":313401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":366823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"icarus\",\"moduleSequenceNumber\":453011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"icarus\",\"moduleSequenceNumber\":1048931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":950279606,\"moneyMax\":23756990150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727992-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,3],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"45.4.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,1040,78]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35150.29112647932,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2256,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":26,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///4f802d29-0ea1-4ea0-9460-1603485f5410\",\"moduleSequenceNumber\":313569}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///9e10e557-6b44-4107-bd50-f3775c81bc15\",\"moduleSequenceNumber\":366848}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":366848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///982e1fdf-42e4-4eff-90be-1d202ed03335\",\"moduleSequenceNumber\":298806}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":298806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///bc04c9ae-d1ce-42b0-a8c3-a6328cbc66bb\",\"moduleSequenceNumber\":794}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b92ca605-b3d4-41b7-8e97-386228e775a7\",\"moduleSequenceNumber\":298862}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":298862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///80a7d9c2-61cd-4582-a2af-c4cc2f568ebf\",\"moduleSequenceNumber\":160859}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///a6dafe8c-421a-4430-815c-6c02b8007f52\",\"moduleSequenceNumber\":366858}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":366858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///13adf7a1-ed6e-4e9e-b792-ab4c7c5ed882\",\"moduleSequenceNumber\":313513}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":313513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///4f802d29-0ea1-4ea0-9460-1603485f5410\",\"moduleSequenceNumber\":313569}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":313569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":366840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///6bf8e498-e385-4bbb-b797-1f2f84687685\",\"moduleSequenceNumber\":453035}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":453035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///b8d2ef49-6a48-443f-b342-89023577a22e\",\"moduleSequenceNumber\":1048953}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1048953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":36.19000000000007,\"minDifficulty\":27,\"moneyAvailable\":3807081982.3766212,\"moneyMax\":29740909975,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-445691-TheBlackHand.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[5,1],[8,2,3],[9,1,8,2],[5,8,5,8,6]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899962.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[22,89,174,138],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"20.1.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":860190332,\"moneyMax\":21504758300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135144-BladeIndustries.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[20,198,12,195,78,36,138,190,95,98,149,15,89,161,67,66,172,132,53,175,156,73,171,5,157,49,169,172,18,157,21,70,185,34,113,199,91,90,194,8,55,178]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-100450-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,6],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520789-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,6],[9,8,8],[5,8,2,8],[2,3,5,6,8],[2,8,3,8,3,4],[2,1,4,8,4,9,7],[4,2,2,6,2,5,5,7],[4,3,9,9,9,4,1,6,6],[8,5,1,2,4,1,6,4,8,3],[3,8,3,7,1,4,1,4,2,7,8]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"46.4.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":679854565,\"moneyMax\":16996364125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"53.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":366845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":366846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":313445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":313446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":366850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":453038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1048952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":820295434,\"moneyMax\":20507385850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-894000.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2286\",-91],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492760.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,6,8,5,0,7,7,0,1,5,4,8,0,4,2,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311912.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[119,160,161,60,146,190,50,99,88,23,169,34,177,9,133,35,156,12,147,50,99,10,158,117,150,47,41,38,193,181,21,60,79,169,129,32,98,68,192,173,168,106,86,155,113,33],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"79.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":366780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":366781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":313336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":313337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":366783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":452971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1048915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":789020396,\"moneyMax\":19725509900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-860171-TheBlackHand.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[8,6],[4,1,5],[2,6,2,5],[9,4,7,3,8],[3,7,9,6,3,5]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"58.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":366784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":366785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":313347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":313348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":366790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":452977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1048921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1053926398,\"moneyMax\":26348159950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"19.7.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,0,260]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8625.369619976462,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2251,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0596892a-5d38-4eba-a034-d13226652816\",\"moduleSequenceNumber\":313565}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///4532981b-024b-404b-9deb-a197f4b64c24\",\"moduleSequenceNumber\":366799}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"omnia\",\"moduleSequenceNumber\":366799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///7bcd693b-a21d-4dbd-bedb-5ac3e7c70ec4\",\"moduleSequenceNumber\":298800}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"omnia\",\"moduleSequenceNumber\":298800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///d92a7c4b-4ea8-450e-9329-283913bb3f51\",\"moduleSequenceNumber\":795}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///29916ac3-c9f4-4c2b-a862-c80799f390e7\",\"moduleSequenceNumber\":298858}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omnia\",\"moduleSequenceNumber\":298858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///c6da8846-739e-4ed8-868f-f8b24709f48c\",\"moduleSequenceNumber\":160845}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"omnia\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///e011250d-6d92-4e8d-91c5-026be85e97c2\",\"moduleSequenceNumber\":366827}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"omnia\",\"moduleSequenceNumber\":366827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///8fb0531b-dd67-4db9-ac30-13ae64de585a\",\"moduleSequenceNumber\":313509}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omnia\",\"moduleSequenceNumber\":313509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0596892a-5d38-4eba-a034-d13226652816\",\"moduleSequenceNumber\":313565}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":313565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":366791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///c15b484f-7815-4df0-9eea-e99ca3f5f8ce\",\"moduleSequenceNumber\":452987}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"omnia\",\"moduleSequenceNumber\":452987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///c71e6863-4a7f-41b3-bb88-1fcfc7563bbd\",\"moduleSequenceNumber\":1048940}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"omnia\",\"moduleSequenceNumber\":1048940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":53.79999999999983,\"minDifficulty\":29,\"moneyAvailable\":944889059,\"moneyMax\":23622226475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553041.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,1],[0,0],[1,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"14.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":366851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":366852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":313454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":313455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":366856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":453044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":1048956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1031532160,\"moneyMax\":25788304000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623173.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[154,72,148,180,194,59,36,1,32,10,165,83,72,57,78,33,141,50,182,26,87,148,169,52,147,162,71,168,126,48,48,135,135,10,167],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-137617-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a((()a)))((\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200927.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,4],[7,7,2],[2,5,6,6],[9,1,2,7,2],[8,9,4,8,6,4],[1,5,4,1,7,1,4],[4,2,1,1,1,7,9,6],[5,7,9,7,1,5,8,2,9],[1,5,2,6,6,2,2,8,1,7]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-649461.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[36,20,67,14,16,198,13,2,106,45,71,10,183,5,178,29,108,159,68,93,170,25,37,171,98,182,47,139,66,200,23,172,61,22,16,71,49,162,121,74,77,192,183,114],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"62.2.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":820956007,\"moneyMax\":20523900175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692711.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"219178232246\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"93.0.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,0,442,156]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16934.66159993158,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.20999994034,\"pid\":2259,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///226404fc-1d03-4fcf-928d-b68f3ecf8192\",\"moduleSequenceNumber\":313570}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///aae8c858-a040-457c-a8eb-5cad33ca09dc\",\"moduleSequenceNumber\":366854}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"solaris\",\"moduleSequenceNumber\":366854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///4aac8e8d-cf85-4b76-98a6-227f40550bee\",\"moduleSequenceNumber\":298807}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"solaris\",\"moduleSequenceNumber\":298807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///a345257d-4c89-41be-9eb0-c8037dd7e71e\",\"moduleSequenceNumber\":796}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3756e01d-5e62-487d-b86a-9f1e8d2b2714\",\"moduleSequenceNumber\":298863}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"solaris\",\"moduleSequenceNumber\":298863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///0a00c342-81b3-412f-9f7a-40db24177629\",\"moduleSequenceNumber\":160861}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"solaris\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///5ae8939e-ab37-4f88-be07-7bc55991498f\",\"moduleSequenceNumber\":366859}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"solaris\",\"moduleSequenceNumber\":366859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///c354069f-7f8a-4097-8fbd-d2439fea981b\",\"moduleSequenceNumber\":313514}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"solaris\",\"moduleSequenceNumber\":313514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///226404fc-1d03-4fcf-928d-b68f3ecf8192\",\"moduleSequenceNumber\":313570}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":313570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":366849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///1bc91d67-ccd0-4612-ad45-b5ec603e2481\",\"moduleSequenceNumber\":453042}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"solaris\",\"moduleSequenceNumber\":453042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///0413a9c9-11dd-4d21-aca3-dc273676761b\",\"moduleSequenceNumber\":1048958}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"solaris\",\"moduleSequenceNumber\":1048958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":33.76799999999999,\"minDifficulty\":24,\"moneyAvailable\":944926788.593554,\"moneyMax\":17605762575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965311.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,14],[20,21],[24,25],[4,8],[15,17],[17,21],[7,15],[7,11],[17,22],[22,30],[22,30],[18,22],[20,29],[9,16],[14,21],[3,13],[10,13],[10,17],[11,17]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"47.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":366795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":366796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":313365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":313366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":366800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":452988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":1048929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1343164603,\"moneyMax\":33579115075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-675893-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7299816\",-76],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-568161.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[19,105,10,48,101,87,4,103,114,152,12,184,101],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"71.6.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,1092,78]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38002.573329206825,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2250,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":26,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///76918037-05ea-4319-9241-d6132782d55a\",\"moduleSequenceNumber\":313566}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///9dff4a1f-b560-4910-aa58-ee213b35f7cc\",\"moduleSequenceNumber\":366807}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":366807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///64e7c82e-6fda-421a-b908-210ab857cd96\",\"moduleSequenceNumber\":298801}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":298801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b47b428c-e2d8-4df6-a43c-7d4f8317cb1f\",\"moduleSequenceNumber\":797}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2e8d6440-62dd-44a5-9984-ad0ccd8b804c\",\"moduleSequenceNumber\":298859}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":298859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///1ab1e426-d7b6-4469-9bfc-11e2b9632e68\",\"moduleSequenceNumber\":160848}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///16bb886d-d491-40e8-a115-4717c4aeb42d\",\"moduleSequenceNumber\":366829}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":366829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///25cae99f-4d07-46c3-ac73-bc4b63dbe9c8\",\"moduleSequenceNumber\":313510}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":313510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///76918037-05ea-4319-9241-d6132782d55a\",\"moduleSequenceNumber\":313566}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":313566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":366798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///d6df8c8e-c2f3-4ab2-853d-032a4a753059\",\"moduleSequenceNumber\":452994}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":452994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///4ac5f7ba-2292-4b7b-8506-940072872fed\",\"moduleSequenceNumber\":1048938}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1048938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":37.99400000000007,\"minDifficulty\":28,\"moneyAvailable\":5407658761.235883,\"moneyMax\":40557231225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":767,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"44.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":366824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":366825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":313408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":313409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":366828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":453016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":1048939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1218447340,\"moneyMax\":30461183500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":792,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950704-AeroCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,7,33],[10,1,45],[49,21,4],[20,31,33],[6,20,41],[5,10,19],[39,30,42],[8,29,41]],\"reward\":{\"name\":\"AeroCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-272235.cct\",\"type\":\"Total Ways to Sum\",\"data\":8,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-210912-NiteSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":970432132,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856614-AevumPoliceHeadquarters.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,22],[4,6],[14,17],[15,24],[8,14],[15,22],[7,15],[8,15],[12,22],[8,18],[21,25],[13,20],[2,9]],\"reward\":{\"name\":\"Aevum Police Headquarters\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759340-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[14,147,46,179,133,27,170,163,95,65,42,198,113,56,73,45,73,7,111,162,131,68,129,181,153,38,44,96,23,74,159,35,1,125,172,86,103,48,90,113,25,189,20,7,168,192,186,114,120],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"80.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1323516813,\"moneyMax\":33087920325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501054-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-924548-Joe'sGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,9],[5,1,9],[9,5,7,2]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"38.2.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,0,0,120]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3647.9798407328412,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2258,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///fb00b061-2999-4744-bede-4c17ab2a7d0b\",\"moduleSequenceNumber\":313567}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///e79ac139-593c-4d24-93de-c048820af697\",\"moduleSequenceNumber\":366811}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":366811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///9631541d-9a76-4a86-85ea-1f2fceb8323f\",\"moduleSequenceNumber\":298804}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":298804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///a05c87b2-a957-4c38-af44-6c46feb2f0f0\",\"moduleSequenceNumber\":798}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///46f2e1d1-02a5-40bd-8f50-7e75aff39ab9\",\"moduleSequenceNumber\":298860}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":298860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///1ab0fe3c-7505-4510-acb0-2c9af79d8ed3\",\"moduleSequenceNumber\":160849}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///95eb687d-f247-4727-b37c-2babcdd2a902\",\"moduleSequenceNumber\":366855}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":366855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///8f726f74-da21-411d-8c01-3d1682112a34\",\"moduleSequenceNumber\":313511}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":313511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///fb00b061-2999-4744-bede-4c17ab2a7d0b\",\"moduleSequenceNumber\":313567}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":313567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":366809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///59b4aa01-9f39-473d-ab01-5a678a3d7c5f\",\"moduleSequenceNumber\":453000}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":453000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///48c99b1d-8e35-4666-baac-a268015d5a5f\",\"moduleSequenceNumber\":1048957}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":1048957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":62.20000000000016,\"minDifficulty\":26,\"moneyAvailable\":1088646740,\"moneyMax\":27216168500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77798-Joe'sGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[5,8],[6,2,3],[9,5,7,2],[2,6,5,3,8],[6,6,1,8,4,4]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640167.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,-5,5,-2,-6,7,-5,-10,-8,1,7,8,5,-7,-3,9,6,-8,9,8,-10,-2,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464172.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,10],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-352671.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":853779967,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"9.0.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,0,174]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4565.3828041417155,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2238,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///62d0f7fc-bc64-49d4-9892-42b55c9e03f4\",\"moduleSequenceNumber\":313560}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///7e56c91e-08fa-4468-9a82-a099ad147557\",\"moduleSequenceNumber\":366757}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":366757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///27ded402-d043-487b-899f-b2f6a547a390\",\"moduleSequenceNumber\":298791}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":298791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///a8f7465b-ce9f-422d-81ca-659762f78987\",\"moduleSequenceNumber\":799}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a62df0c5-f8a0-4346-a458-4e39a162563e\",\"moduleSequenceNumber\":298853}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":298853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///58345e4c-7ac0-4f0e-aa7d-173d2eeadf87\",\"moduleSequenceNumber\":160832}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///5fb8f226-da36-422b-bfdd-c3b37e712bea\",\"moduleSequenceNumber\":366779}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":366779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///5993bbd9-5fc9-4ab1-a439-39a4c3f65c50\",\"moduleSequenceNumber\":313504}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":313504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///62d0f7fc-bc64-49d4-9892-42b55c9e03f4\",\"moduleSequenceNumber\":313560}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":313560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":366753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///d5b6de11-98ef-41a1-a266-821b9966daf9\",\"moduleSequenceNumber\":452945}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":452945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3e8f4ade-f506-44ea-9ae3-8a1e1c47a1fd\",\"moduleSequenceNumber\":1048911}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1048911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":43.300000000000225,\"minDifficulty\":22,\"moneyAvailable\":772834741,\"moneyMax\":19320868525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"6.4.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[734873295,169,234,221]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12852.702963380567,\"onlineMoneyMade\":734873295,\"onlineRunningTime\":68411.40999994034,\"pid\":2252,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///94d04350-3c0c-4f19-ae9d-ab4cf8a322b6\",\"moduleSequenceNumber\":313561}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///75b55384-ad1a-4282-8bd7-f31fa08a7b70\",\"moduleSequenceNumber\":366759}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":366759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///d6fd7f2b-78ec-4d11-8092-27921eea766f\",\"moduleSequenceNumber\":298794}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":298794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///ebb2b133-75d7-42ad-841e-67dcb674fa10\",\"moduleSequenceNumber\":800}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///76ba6535-31c9-4e97-82b9-80869536d222\",\"moduleSequenceNumber\":298854}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":298854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///695a46bd-8aad-4692-8c6e-166dd61d0b6a\",\"moduleSequenceNumber\":160833}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///475bc321-0b37-450a-b9ff-5625d1645a45\",\"moduleSequenceNumber\":366810}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":366810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///af43bf93-0363-4102-ac7d-1aa2e0831742\",\"moduleSequenceNumber\":313505}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":313505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///94d04350-3c0c-4f19-ae9d-ab4cf8a322b6\",\"moduleSequenceNumber\":313561}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":313561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":366758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///97b422c7-94b9-40a9-899d-127cbc76d59a\",\"moduleSequenceNumber\":452948}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":452948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///2495bdf5-8098-49db-ac18-b90aabbefea9\",\"moduleSequenceNumber\":1048942}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1048942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":100,\"minDifficulty\":18,\"moneyAvailable\":14873447250,\"moneyMax\":14873447250,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":495,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219646.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[140,11,76,63,59,185,147,170,40,32,167,178,1,34,186,164,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"47.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[1545575187,234,234,182]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15321.734351339142,\"onlineMoneyMade\":1545575187,\"onlineRunningTime\":68411.40999994034,\"pid\":2248,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b70fa8fa-fff2-45f8-a50a-686e9f03c981\",\"moduleSequenceNumber\":313568}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///e79eadc9-7e21-42ee-861a-e26369580161\",\"moduleSequenceNumber\":366818}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":366818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///c0f85c09-3d6a-4d68-92a9-2059ab94b393\",\"moduleSequenceNumber\":298805}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":298805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///8556cdaa-bd04-461d-9feb-23aee939cd46\",\"moduleSequenceNumber\":801}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///37562c49-3691-497d-9450-cd8a55208fbd\",\"moduleSequenceNumber\":298861}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":298861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///95e7b53c-1034-4038-96e9-f7f698454bf4\",\"moduleSequenceNumber\":160851}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///9f70e60b-383c-4ce7-9ccd-c779383d003e\",\"moduleSequenceNumber\":366857}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":366857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///58dd8c17-569e-4207-a81b-6f8d20f12791\",\"moduleSequenceNumber\":313512}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":313512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b70fa8fa-fff2-45f8-a50a-686e9f03c981\",\"moduleSequenceNumber\":313568}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":313568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":366817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///5188df88-07e5-4939-b7d2-883f4d020151\",\"moduleSequenceNumber\":453007}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":453007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3e712d9a-7d83-4ba1-94cf-c7177964dfec\",\"moduleSequenceNumber\":1048936}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1048936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":100,\"minDifficulty\":20,\"moneyAvailable\":15837211300,\"moneyMax\":15837211300,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":541,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492950.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"551182248925\",41],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"69.3.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3247430862,468,546,468]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42479.81648344865,\"onlineMoneyMade\":3247430862,\"onlineRunningTime\":68411.40999994034,\"pid\":2236,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":26,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///55bd655a-9a4a-45f8-b64f-872b7514e57a\",\"moduleSequenceNumber\":313559}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///e8dbf311-0250-494b-9aa5-6168630b52f4\",\"moduleSequenceNumber\":366747}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":366747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///59dc91a8-8edb-4dc6-b019-35ec93e8f911\",\"moduleSequenceNumber\":298790}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":298790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///54161f5e-5b0c-41cb-93ab-b7069dcee888\",\"moduleSequenceNumber\":802}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///58163e66-e881-4314-b2e3-f9f29a85855e\",\"moduleSequenceNumber\":298852}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":298852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///020e7eba-62af-4d62-a6ae-4f4c8233a6ef\",\"moduleSequenceNumber\":160829}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///822f6028-55de-4d9f-867a-fc87e4563027\",\"moduleSequenceNumber\":366778}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":366778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///91807400-1cab-43d3-beea-29445234d68c\",\"moduleSequenceNumber\":313503}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":313503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///55bd655a-9a4a-45f8-b64f-872b7514e57a\",\"moduleSequenceNumber\":313559}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":313559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":366746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///ce45ad5f-6fcf-4683-b767-d9494ba8291f\",\"moduleSequenceNumber\":452936}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":452936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///5f4a455c-014b-427f-a4ea-4a69ab8397d9\",\"moduleSequenceNumber\":1048906}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1048906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":9462899425,\"moneyMax\":9462899425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":421,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-989336-Sector-12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"910144\",-40],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"82.5.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1834409512,468,442,546]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29325.640362125512,\"onlineMoneyMade\":1834409512,\"onlineRunningTime\":68411.40999994034,\"pid\":2240,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":26,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c5fd05df-f05c-47db-b980-8e86c1096a2e\",\"moduleSequenceNumber\":313556}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///c06d88fa-eeb1-4dbb-b8a8-9d3a7badc64e\",\"moduleSequenceNumber\":366733}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":366733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///cce208e2-b4be-40cc-825b-704f61f86082\",\"moduleSequenceNumber\":298784}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":298784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///2953151b-e06c-450e-ad25-6d504614ecb9\",\"moduleSequenceNumber\":803}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///16bd646f-0e7d-4cab-82c5-a94338231925\",\"moduleSequenceNumber\":298849}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":298849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///4352f864-9ca8-494a-a2e5-febda082876f\",\"moduleSequenceNumber\":160824}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///68c067c2-bfb1-458b-9a52-6c7eb958409e\",\"moduleSequenceNumber\":366760}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":366760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///631e2cf5-d7e0-4813-b582-e18fbd30e2ae\",\"moduleSequenceNumber\":313500}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":313500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c5fd05df-f05c-47db-b980-8e86c1096a2e\",\"moduleSequenceNumber\":313556}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":313556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":366724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///b99f5dd5-9b14-4ffc-a0a0-dcc2b35a8483\",\"moduleSequenceNumber\":452921}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":452921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///a80be8a0-cde1-4767-b0de-7460d925374d\",\"moduleSequenceNumber\":1048916}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1048916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":100,\"minDifficulty\":18,\"moneyAvailable\":5229385325,\"moneyMax\":5229385325,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":415,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730486-Bachman&Associates.cct\",\"type\":\"Total Ways to Sum\",\"data\":79,\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-171449.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"85.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,117,325]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13436.725746699305,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2241,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e644a7da-c584-4f7d-a81d-d8c2d5e4380a\",\"moduleSequenceNumber\":313562}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///3ca13620-d667-4f47-955d-b19c0f68688e\",\"moduleSequenceNumber\":366768}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":366768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///bf472560-6f07-477c-b329-b78715dcd369\",\"moduleSequenceNumber\":298796}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":298796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///996fc694-ede3-45ec-969e-3212081d7e40\",\"moduleSequenceNumber\":804}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8e7ee650-c0a8-4ed0-865c-bb4ccb0e8618\",\"moduleSequenceNumber\":298855}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":298855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///775ffed9-50d1-4563-91f3-c5797ebd5211\",\"moduleSequenceNumber\":160836}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///a9780a1a-41f5-473c-9d0c-aab0b45d236a\",\"moduleSequenceNumber\":366812}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":366812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///e24982dc-0e18-427b-931b-728152c08473\",\"moduleSequenceNumber\":313506}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":313506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e644a7da-c584-4f7d-a81d-d8c2d5e4380a\",\"moduleSequenceNumber\":313562}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":313562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":366764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///05e2a8d2-b578-4c56-aded-09b9c7234a0c\",\"moduleSequenceNumber\":452956}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":452956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///4d20d528-77ce-4c55-9ec3-6c2e793864fd\",\"moduleSequenceNumber\":1048917}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1048917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":35.86799999999994,\"minDifficulty\":26,\"moneyAvailable\":994120654.4034259,\"moneyMax\":22806023050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729528.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[32,26,143,163,5,159,114,106,28,176,38,21,115,7,10,181,55,156,183,1,119,101,56],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"5.2.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[1417203645,234,247,234]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17768.106743228982,\"onlineMoneyMade\":1417203645,\"onlineRunningTime\":68411.40999994034,\"pid\":2235,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///5d8f1e2a-1858-41d4-9c8e-d175ba4c952a\",\"moduleSequenceNumber\":313554}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///d4ddd77a-437f-4edf-9465-046bc79b139a\",\"moduleSequenceNumber\":366712}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":366712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///a16a7d7e-aeb1-465b-a43a-ad4e6e099bfd\",\"moduleSequenceNumber\":298780}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":298780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///df1bd461-ba41-416c-b86b-21a22530989f\",\"moduleSequenceNumber\":805}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///98c48b5d-3fb8-4611-9382-c45a00df4248\",\"moduleSequenceNumber\":298847}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":298847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///2671e2ec-c744-4fd0-a97e-6cc5bc5ce5d9\",\"moduleSequenceNumber\":160817}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///b3adaadd-9daf-4876-ad59-3ee929f5be50\",\"moduleSequenceNumber\":366748}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":366748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///7d08054d-51d8-458c-95e5-8def8a6700b9\",\"moduleSequenceNumber\":313498}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":313498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///5d8f1e2a-1858-41d4-9c8e-d175ba4c952a\",\"moduleSequenceNumber\":313554}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":313554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":366711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///bf63117a-2934-46e2-bb44-6723352223bd\",\"moduleSequenceNumber\":452901}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":452901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///ca5edc41-1206-4781-8362-d790426097c6\",\"moduleSequenceNumber\":1048905}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1048905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":22.762,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":8670319025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":447,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-568806-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1],[0,0,1,0],[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,1],[1,0,0,0]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392434-RhoConstruction.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[15,132,151,53,198,177,13,164,15,69,106,68,72,178,156,29,173,77,182,31,2,171,187,110,199,29,8,116,182,142,180,187,87,2],\"reward\":{\"name\":\"Rho Construction\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622180-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-453860.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"10521227117\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-83616-ECorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[30,155,98,176,199,186,64,152,185,156,54,167,52,71,141,53,51,46,39,76,144],\"reward\":{\"name\":\"ECorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707405-TheBlackHand.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[49,8,42,23,4,9,50,40,30,41,1],[17,14,3,26,33,27,16,34,20,4,39],[48,35,16,11,18,50,17,15,38,47,15],[33,30,25,11,18,25,25,25,24,36,9],[49,13,14,45,44,45,5,25,28,31,26],[8,46,36,44,37,5,1,15,46,29,33],[7,31,40,19,10,4,9,28,24,21,3],[33,35,45,30,10,12,34,37,15,48,19]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"87.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"syscore\",\"moduleSequenceNumber\":366728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"syscore\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"syscore\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"syscore\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"syscore\",\"moduleSequenceNumber\":366729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"syscore\",\"moduleSequenceNumber\":313263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":313264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":366734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"syscore\",\"moduleSequenceNumber\":452922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"syscore\",\"moduleSequenceNumber\":1048900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":463079549,\"moneyMax\":11576988725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":638,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316735.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[88,117,169,100,181,190,176],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"63.0.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[612133327,156,273,247]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17376.297584206477,\"onlineMoneyMade\":612133327,\"onlineRunningTime\":68411.40999994034,\"pid\":2243,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///937d19ee-bca9-41b8-bf43-92ffab92361d\",\"moduleSequenceNumber\":313563}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///0e182655-69ba-4ce5-b93f-12f3f032dbbf\",\"moduleSequenceNumber\":366773}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":366773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///96277a8a-3490-4cd1-a02c-313ee0823f1e\",\"moduleSequenceNumber\":298797}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":298797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b9131a9c-f485-43d4-89a3-0c3f9cf91870\",\"moduleSequenceNumber\":806}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bd44ad2a-7ac1-4aeb-8948-175c164fec8b\",\"moduleSequenceNumber\":298856}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":298856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///89f0c2e4-700a-4b04-a8d9-915bfe71a056\",\"moduleSequenceNumber\":160838}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///39eda83b-5659-4e7c-9bff-15274deba525\",\"moduleSequenceNumber\":366813}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":366813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///bf6a3ec3-7cba-4529-89d8-4d51b589a5b4\",\"moduleSequenceNumber\":313507}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":313507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///937d19ee-bca9-41b8-bf43-92ffab92361d\",\"moduleSequenceNumber\":313563}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":313563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":366769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///cd778cfc-5587-4bd1-8472-c2ec0403b3f2\",\"moduleSequenceNumber\":452961}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":452961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///5bdc6103-1168-462b-88cc-86126cdd9831\",\"moduleSequenceNumber\":1048922}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":1048922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":100,\"minDifficulty\":23,\"moneyAvailable\":12230297850,\"moneyMax\":12230297850,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":416,\"serverGrowth\":31}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-505076.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)((a()((\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"43.8.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[164729898,138,156,186]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7174.489960673062,\"onlineMoneyMade\":164729898,\"onlineRunningTime\":68411.40999994034,\"pid\":2226,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///d388537d-60eb-4df9-a4c6-0b6a42c8f8ec\",\"moduleSequenceNumber\":313553}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///a5b96f14-614d-4b77-a880-e04fff2d100b\",\"moduleSequenceNumber\":366700}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":366700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///6d67a532-207d-49ac-94ca-c80f3bd46f87\",\"moduleSequenceNumber\":298778}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":298778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///c0292f8b-f6c1-413b-ae27-bb0c52d5fcdf\",\"moduleSequenceNumber\":807}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///46a8acc9-8c14-465f-a3a0-31ca8e8c9d76\",\"moduleSequenceNumber\":298846}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":298846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///cbcca48a-5c99-476a-aa30-1d9af0b9c415\",\"moduleSequenceNumber\":160814}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///f8107ae8-dad2-460a-8efc-fe25f0fa2753\",\"moduleSequenceNumber\":366742}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":366742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///90ba3300-01f0-4d78-8f27-f47bfbca5743\",\"moduleSequenceNumber\":313497}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":313497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///d388537d-60eb-4df9-a4c6-0b6a42c8f8ec\",\"moduleSequenceNumber\":313553}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":313553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":366696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///8aa1ee86-eaa3-4df4-9130-34fe9ee6292e\",\"moduleSequenceNumber\":452888}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":452888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///5dc5de40-1562-4150-b5f0-21aa642f10ad\",\"moduleSequenceNumber\":1048882}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":1048882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":100,\"minDifficulty\":14,\"moneyAvailable\":4326429625,\"moneyMax\":4326429625,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":296,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-459887.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[0,0,0],[1,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"26.8.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"comptek\",\"moduleSequenceNumber\":366713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"comptek\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"comptek\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"comptek\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"comptek\",\"moduleSequenceNumber\":366714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"comptek\",\"moduleSequenceNumber\":313233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":313234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":366716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"comptek\",\"moduleSequenceNumber\":452904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"comptek\",\"moduleSequenceNumber\":1048885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":100,\"minDifficulty\":19,\"moneyAvailable\":5978010600,\"moneyMax\":5978010600,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":331,\"serverGrowth\":64}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362578.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[4,7],[5,2,7],[1,1,9,8],[8,2,4,5,3]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"91.6.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[373556148,102,108,138]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7607.294677937605,\"onlineMoneyMade\":373556148,\"onlineRunningTime\":68411.40999994034,\"pid\":2234,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///8dc99c39-5f4c-4e3e-bc4e-f5e64d5ad7c6\",\"moduleSequenceNumber\":313555}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///2b20cfba-afb9-4cf5-8bea-36d00aa6ba9b\",\"moduleSequenceNumber\":366731}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"netlink\",\"moduleSequenceNumber\":366731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///e6d5c0b5-de4f-4dcb-baee-051d325a6cea\",\"moduleSequenceNumber\":298781}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"netlink\",\"moduleSequenceNumber\":298781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///6e4c6611-7339-48bb-99ef-3ad24c818f39\",\"moduleSequenceNumber\":808}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b3df935a-9733-4e31-beb1-bc5be1dd82ac\",\"moduleSequenceNumber\":298848}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"netlink\",\"moduleSequenceNumber\":298848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///5e11cd9c-b6fb-426f-9d6c-9136a9dc7806\",\"moduleSequenceNumber\":160823}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"netlink\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///d0078bd5-06a3-4d9d-b755-670e9daf56ec\",\"moduleSequenceNumber\":366749}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"netlink\",\"moduleSequenceNumber\":366749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///633c4965-9488-45cc-a88f-da4e7adaa751\",\"moduleSequenceNumber\":313499}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"netlink\",\"moduleSequenceNumber\":313499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///8dc99c39-5f4c-4e3e-bc4e-f5e64d5ad7c6\",\"moduleSequenceNumber\":313555}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":313555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":366723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///c4c13165-f9c0-4606-ad54-13c504c38e9d\",\"moduleSequenceNumber\":452918}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"netlink\",\"moduleSequenceNumber\":452918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///ee53454c-97c9-4d23-a39c-2d9f0cf8806c\",\"moduleSequenceNumber\":1048903}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"netlink\",\"moduleSequenceNumber\":1048903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":20.012,\"minDifficulty\":20,\"moneyAvailable\":6812177204,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":382,\"serverGrowth\":61}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-58078-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,4],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765155-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1,0,0],[1,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-94993.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[129,119,113,68,74,111,31,46,162,132,17,107,101,180,67,78,193,128,83,109,160]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-962903.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[7,8],[6,5,9],[5,1,5,4],[1,3,5,3,1],[5,9,9,9,9,5],[3,6,8,9,3,1,7],[2,1,4,3,6,7,3,9],[8,2,7,7,7,5,4,6,8]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-852757.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":509128004,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"37.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":366697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":366698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":313209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":313210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":366701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":452889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1048879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":100,\"minDifficulty\":22,\"moneyAvailable\":1999595125,\"moneyMax\":1999595125,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":261,\"serverGrowth\":43}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"30.3.0.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5850,2081,2080,2080]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15666.526754691346,\"onlineMoneyMade\":5850,\"onlineRunningTime\":68411.40999994034,\"pid\":2223,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///8b09991d-90dc-4678-8f13-f61cced93e34\",\"moduleSequenceNumber\":313515}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":366473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///f473e5b8-a93c-4be4-995a-271e1e5120c4\",\"moduleSequenceNumber\":298693}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":298693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///26f160ac-b05f-40fb-a33c-96e6188a7d38\",\"moduleSequenceNumber\":809}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///89c8a872-c678-4ce2-bbaa-74cbac2e5a38\",\"moduleSequenceNumber\":298808}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":298808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///60e21ba5-7274-489a-82c2-9086db896d76\",\"moduleSequenceNumber\":366511}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":366511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///d197f47b-c1c1-48a8-bce4-93ff11ca0273\",\"moduleSequenceNumber\":313459}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":313459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///8b09991d-90dc-4678-8f13-f61cced93e34\",\"moduleSequenceNumber\":313515}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":313515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":366476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":452650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3c0589c2-6348-4a43-b9fc-eb5b733bbe80\",\"moduleSequenceNumber\":1048877}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":1048877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":100,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":2,\"fn\":\"contract-240462-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()(()aa)a\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848168.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":266932720,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"20.3.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,12408,12438,12426]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":180893.4053016367,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2220,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a96d0903-2297-4e0c-acf8-dff86144f1a3\",\"moduleSequenceNumber\":313516}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///d8dc7a1a-df55-4b10-b5d8-c8a3e170e9f3\",\"moduleSequenceNumber\":366491}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":366491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///fdba3658-904a-4564-a2c4-82a291c51795\",\"moduleSequenceNumber\":298731}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":298731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b0673b8c-f68a-40d5-a964-a6b90a09fd79\",\"moduleSequenceNumber\":810}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///55952137-e972-40b6-a480-df3c567fb636\",\"moduleSequenceNumber\":404}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///137838f4-0eb2-43b6-8861-988cfe7b9e16\",\"moduleSequenceNumber\":298809}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":298809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///70da9d2b-0809-4472-825f-50490d376d91\",\"moduleSequenceNumber\":160789}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///f2df3638-520f-4bb5-b2ea-6ab730c6115a\",\"moduleSequenceNumber\":366639}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":366639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///1ba1f4d3-22c5-43a0-9899-ea3821d65721\",\"moduleSequenceNumber\":313460}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":313460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a96d0903-2297-4e0c-acf8-dff86144f1a3\",\"moduleSequenceNumber\":313516}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":313516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":366483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///3e7b8dff-88cf-41fe-b21d-6f72ba263465\",\"moduleSequenceNumber\":452664}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":452664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///bb1a0823-ca7c-4ca0-9d5f-82c419e54502\",\"moduleSequenceNumber\":1048868}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1048868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-979079.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[160,112,106,124,85,120,91,168,109,128,108,181,193,24,65,33,22,142,180,96,80,124,64,146,169,18,148,169,169,94,155,117],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138253-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[31,106,157,149,120,27,124,187,159,142,198,51,176,180,197],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"4.7.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,6858,6894,6882]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":100197.71489754716,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2221,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///08157912-9149-41c8-8ba2-a14aa70fd584\",\"moduleSequenceNumber\":313518}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///ba427f01-e307-4f3e-878f-2c209bafa4eb\",\"moduleSequenceNumber\":366501}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":366501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///2930b652-5151-4aae-b0d6-bbc3bf718b8e\",\"moduleSequenceNumber\":298734}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":298734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///255c41e8-021d-413b-af2b-ba4bbbc85826\",\"moduleSequenceNumber\":811}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///c70d788f-b103-44eb-97fd-9d82e371457d\",\"moduleSequenceNumber\":405}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4da6b9d4-cf4c-4fcc-bd9f-248afac64721\",\"moduleSequenceNumber\":298811}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":298811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///a6cc8f53-896f-4227-92d0-68e7e67219b9\",\"moduleSequenceNumber\":160793}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///67b9a8cd-25b2-4b79-95ce-4d530530ec6d\",\"moduleSequenceNumber\":366646}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":366646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///2122d28b-4b3f-411f-b228-1b8d2544b62b\",\"moduleSequenceNumber\":313462}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":313462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///08157912-9149-41c8-8ba2-a14aa70fd584\",\"moduleSequenceNumber\":313518}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":313518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":366492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///8e8418d4-3788-4105-9dbc-01a15c55316e\",\"moduleSequenceNumber\":452674}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":452674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///24d15b63-fb2a-4f3d-9e25-74b5681af173\",\"moduleSequenceNumber\":1048872}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1048872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538473-Aevum.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,12],\"reward\":{\"name\":\"Aevum\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-403175.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[19,102,4,130,63,117,173,71,171,90,125,163,103,138,34,5,164,199,30,100,41,69,88,30,121,31,39,21],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917316-BitRunners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[0,0,1],[0,1,0],[0,0,0],[1,0,0],[0,0,0],[0,0,1],[0,0,0]],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"9.1.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[16930242,4284,4362,4350]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":80860.24251573395,\"onlineMoneyMade\":16930242,\"onlineRunningTime\":68411.40999994034,\"pid\":2224,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b318d3f9-5bad-4cb6-ab6a-d6b428107500\",\"moduleSequenceNumber\":313520}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///996e6875-acd4-422d-bc64-5c244f544601\",\"moduleSequenceNumber\":366508}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":366508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///f39330cb-f802-4b2f-99e4-d93a541a24f6\",\"moduleSequenceNumber\":298737}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":298737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///1956896e-ec61-410a-be4b-5c551b5e7d30\",\"moduleSequenceNumber\":812}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///1114daa5-c6bb-49c1-bd69-7f193f7699e4\",\"moduleSequenceNumber\":406}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4d5c4229-6cf0-429a-ad49-242c125a141f\",\"moduleSequenceNumber\":298813}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":298813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///40b91eb5-188f-4bfd-88cd-0a84f16ced23\",\"moduleSequenceNumber\":160796}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///c45f673a-2e5b-433f-9f4a-ce2cb2c64195\",\"moduleSequenceNumber\":366653}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":366653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///944dfcc8-0fab-4192-92e0-fe8c19cd8597\",\"moduleSequenceNumber\":313464}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":313464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b318d3f9-5bad-4cb6-ab6a-d6b428107500\",\"moduleSequenceNumber\":313520}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":313520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":366502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///6c75d07d-728a-4bee-8483-6cfa87737712\",\"moduleSequenceNumber\":452682}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":452682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///fa4fc688-0e72-4430-9c77-9d017006dff8\",\"moduleSequenceNumber\":1048878}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":1048878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"74.4.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[86935277,1391,1547,1625]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42671.48283934428,\"onlineMoneyMade\":86935277,\"onlineRunningTime\":68411.40999994034,\"pid\":2222,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0d099133-dfa5-422d-9cdf-d3c9b1c11ce8\",\"moduleSequenceNumber\":313517}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///1d1c3f6b-0517-48b9-8d0f-971c7096abf9\",\"moduleSequenceNumber\":366493}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zer0\",\"moduleSequenceNumber\":366493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///32172187-05e3-4ed5-8513-b9c874e548b6\",\"moduleSequenceNumber\":298733}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zer0\",\"moduleSequenceNumber\":298733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///1a536220-1fe4-4d13-984e-88d3324171f4\",\"moduleSequenceNumber\":813}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3cf6bad7-aa76-494f-bed6-1c6c746781be\",\"moduleSequenceNumber\":298810}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":298810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///63f4c245-467e-4e68-a20d-cdfbde7d3562\",\"moduleSequenceNumber\":160790}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"zer0\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///387c768a-7a9c-4a44-a31e-d5172afd2822\",\"moduleSequenceNumber\":366645}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zer0\",\"moduleSequenceNumber\":366645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///acc3bca6-e22a-4f49-a45e-bc64078c34d1\",\"moduleSequenceNumber\":313461}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":313461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0d099133-dfa5-422d-9cdf-d3c9b1c11ce8\",\"moduleSequenceNumber\":313517}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":313517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":366484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///54e03841-4c14-4887-aef4-c3158585ab98\",\"moduleSequenceNumber\":452667}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"zer0\",\"moduleSequenceNumber\":452667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///175daae2-d1cf-4dd7-bf4c-9cba298da4bd\",\"moduleSequenceNumber\":1048874}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zer0\",\"moduleSequenceNumber\":1048874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":100,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"18.4.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[27747510,2394,2502,2490]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56728.42808173755,\"onlineMoneyMade\":27747510,\"onlineRunningTime\":68411.40999994034,\"pid\":2225,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///43f54e05-7300-4d02-a9eb-3d1e8c400bcc\",\"moduleSequenceNumber\":313519}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///efb26936-77ec-4035-ba0c-68f6de82cd90\",\"moduleSequenceNumber\":366503}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":366503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///fa66eec3-2fee-40a3-8b23-5e5b0a229a78\",\"moduleSequenceNumber\":298736}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":298736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///6ac57e1c-6be0-4ac7-bb3d-52f0ebcf4eb6\",\"moduleSequenceNumber\":814}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///18291200-b6e7-433f-84d3-5a9837a12e82\",\"moduleSequenceNumber\":298812}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":298812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///45f2e56d-6339-465e-93dc-7434f9b352e9\",\"moduleSequenceNumber\":160794}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///e630d81f-dfba-40e7-88ef-b440d06b52b4\",\"moduleSequenceNumber\":366652}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":366652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///e0b212a3-e1e6-49b0-9de9-5499a5d30a1b\",\"moduleSequenceNumber\":313463}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":313463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///43f54e05-7300-4d02-a9eb-3d1e8c400bcc\",\"moduleSequenceNumber\":313519}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":313519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":366494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///62541a1e-ce34-4cd2-ad69-03ed741d6378\",\"moduleSequenceNumber\":452677}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":452677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///2c1acc4b-eb48-41cc-a3cf-8cfa67781d95\",\"moduleSequenceNumber\":1048881}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1048881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":100,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450509.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"85.8.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[84650657,2223,2314,2379]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63229.65501616569,\"onlineMoneyMade\":84650657,\"onlineRunningTime\":68411.40999994034,\"pid\":2233,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///fdcfb06c-fddb-4a09-be04-3a157aad791b\",\"moduleSequenceNumber\":313558}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///496b199c-588f-4865-a772-fe7e7dd1eef9\",\"moduleSequenceNumber\":366741}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":366741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///bb3e8415-7f6b-4f92-9848-188a5d609fbf\",\"moduleSequenceNumber\":298789}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":298789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b6dea6cc-f42a-47bb-8bf8-0ec39b79b964\",\"moduleSequenceNumber\":815}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///16191e87-127d-462f-8d15-9a3793d74e88\",\"moduleSequenceNumber\":1227}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5836af8e-02e4-4bcd-8af5-c43d77e38cd7\",\"moduleSequenceNumber\":298851}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":298851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///b3daa6d3-0068-42fb-aa60-2d436cad0b4f\",\"moduleSequenceNumber\":160827}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///0794ab5f-4305-447d-a4f7-b3f753b71432\",\"moduleSequenceNumber\":366777}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":366777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///b2726b14-f27f-476a-8908-8b12d282c2b5\",\"moduleSequenceNumber\":313502}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":313502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///fdcfb06c-fddb-4a09-be04-3a157aad791b\",\"moduleSequenceNumber\":313558}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":313558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":366740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///dce56877-7f1c-4368-9383-786cd974af93\",\"moduleSequenceNumber\":452930}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":452930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///930b28a9-014c-4df3-9fea-d4513df826ea\",\"moduleSequenceNumber\":1048901}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":1048901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":100,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-889046-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":651026843,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685053-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":951169025,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864419-AeroCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,3],\"reward\":{\"name\":\"AeroCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"31.0.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1047028320,1326,1456,1638]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50362.58310643433,\"onlineMoneyMade\":1047028320,\"onlineRunningTime\":68411.40999994034,\"pid\":2228,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b1f904cd-c3f8-4e1a-8c97-052c2329364a\",\"moduleSequenceNumber\":313550}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///cb99fd8d-5bb8-4d15-84d9-a010a08a2f17\",\"moduleSequenceNumber\":366644}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":366644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///45388521-207c-4ec2-9b3a-da8c319964d9\",\"moduleSequenceNumber\":298770}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":298770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///5a5719c4-2e5f-4ded-96cc-0d9dc4d5e5cd\",\"moduleSequenceNumber\":816}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7276e1b4-96a7-47ee-9f9c-8f1ad11fe722\",\"moduleSequenceNumber\":298843}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":298843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///f428b942-48f5-4509-831d-c89c36127a05\",\"moduleSequenceNumber\":160805}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///391cfd3e-c3f9-4a90-b940-2ab45cfbcc37\",\"moduleSequenceNumber\":366702}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":366702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///4c27ef2e-f652-4192-b1f1-7466ad1d7e4f\",\"moduleSequenceNumber\":313494}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":313494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///b1f904cd-c3f8-4e1a-8c97-052c2329364a\",\"moduleSequenceNumber\":313550}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":313550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":366643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///e5938d67-7b3c-4540-a250-01b26dde9bdc\",\"moduleSequenceNumber\":452833}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":452833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///7c9beec3-fd08-4db6-a1e9-758ff371404b\",\"moduleSequenceNumber\":1048887}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1048887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454169-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,1,0,1],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"87.2.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[14096910,1734,1800,1782]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33343.16147559929,\"onlineMoneyMade\":14096910,\"onlineRunningTime\":68411.40999994034,\"pid\":2230,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a60b99fa-e029-4ff4-96f6-7c9a6189c1a3\",\"moduleSequenceNumber\":313522}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///12d8f69d-14e0-4398-bc1b-e23777824685\",\"moduleSequenceNumber\":366515}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":366515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///151231ba-3eba-43dd-afb3-ca7f564ba65f\",\"moduleSequenceNumber\":298741}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":298741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b29759c3-84d0-4eb4-9d93-d9cb911c6643\",\"moduleSequenceNumber\":817}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///7699de73-55ab-4a74-8b46-3c77052daefd\",\"moduleSequenceNumber\":407}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///16c5fd75-3367-4c59-b924-d118bd334aaa\",\"moduleSequenceNumber\":298815}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":298815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///9e6b1769-8505-4ea1-ae55-578ab0e85233\",\"moduleSequenceNumber\":160799}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///03cd3dbc-b879-4e5e-844c-ef47dea7f3a5\",\"moduleSequenceNumber\":366665}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":366665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///4384c759-cb23-4d7f-8236-96a913db7de1\",\"moduleSequenceNumber\":313466}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":313466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a60b99fa-e029-4ff4-96f6-7c9a6189c1a3\",\"moduleSequenceNumber\":313522}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":313522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":366509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///4dac27e6-b719-43b5-aa2b-490f61b4ee96\",\"moduleSequenceNumber\":452689}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":452689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///0afb1206-ea26-4f72-800a-bff8f2463a77\",\"moduleSequenceNumber\":1048892}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1048892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212393.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[93,200,22,92,13,12,194,180,169,154,32,195,179,52,5,39,188,27,66,200,84,84,189,43,160,170,148,103,100,169,89,94,63,54,64,164,76,122,94,107,23,196],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203764-BladeIndustries.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,14],[21,30],[18,27],[9,10],[25,35],[13,18],[8,15],[23,29],[1,2],[19,26],[10,11],[9,15],[21,25],[17,19],[9,12],[17,18],[24,28],[19,28],[5,15]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-825926-BladeIndustries.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[118,42,125,128,151,116,198,184,177,182,134,58,5],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"81.6.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[18805458,1092,1446,1416]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26108.55669786794,\"onlineMoneyMade\":18805458,\"onlineRunningTime\":68411.40999994034,\"pid\":2231,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///94c47582-ed90-4ef9-873c-4b1f80bb1db2\",\"moduleSequenceNumber\":313523}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///64b60b70-3847-415a-894a-2b1fa1929e28\",\"moduleSequenceNumber\":408}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///99310fc3-e5a0-4de6-be56-b5f1c9f02387\",\"moduleSequenceNumber\":366520}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":366520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///2f1fb690-bfee-4148-8dea-448cd81b0c2e\",\"moduleSequenceNumber\":298742}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":298742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///7a6e1a4c-aa4d-4e27-8275-66de7e8bb307\",\"moduleSequenceNumber\":818}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0c1c47b6-6e34-4797-ad4f-b75e8ef01c16\",\"moduleSequenceNumber\":298816}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":298816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///55a35572-5fac-491b-87aa-7c1d33fc2f26\",\"moduleSequenceNumber\":160801}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///8a1c07b3-f326-45e0-8de7-4f41af2b2f4c\",\"moduleSequenceNumber\":366666}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":366666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///e9257236-0cbc-48a2-a3bd-10ab8cbebd04\",\"moduleSequenceNumber\":313467}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":313467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///94c47582-ed90-4ef9-873c-4b1f80bb1db2\",\"moduleSequenceNumber\":313523}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":313523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":366516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///668ed4b3-624d-4d13-b356-5265eb5bf34d\",\"moduleSequenceNumber\":452694}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":452694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///66204da3-a775-48db-b860-be6db72f65f9\",\"moduleSequenceNumber\":1048893}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1048893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331527-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,15],[22,25],[11,16],[20,29],[24,34],[18,25],[10,18],[15,23]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14872-BladeIndustries.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":723695557,\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-254719-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[141,169,90,176,47,24,196,33,16,76,183,101,173,127,83,50,150,17,18,147,135,109,106,140,58,106,48,54]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"59.8.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[108319458,1053,1105,1248]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26642.68659908217,\"onlineMoneyMade\":108319458,\"onlineRunningTime\":68411.40999994034,\"pid\":2237,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c5a5ee31-2a9f-41a1-823c-993fa09ce0a0\",\"moduleSequenceNumber\":313552}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///f3de2232-7bd3-4e76-a61c-5d8dcb193f47\",\"moduleSequenceNumber\":366658}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":366658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///3b8a74e4-86a8-4852-af80-d4ed1753e6ba\",\"moduleSequenceNumber\":298776}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":298776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///ca59312e-fa19-4be1-95ae-32f9b6ccf996\",\"moduleSequenceNumber\":819}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c9edcbce-0d73-46c6-b418-8b72adbfedd3\",\"moduleSequenceNumber\":298845}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":298845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///07e13e07-f2bd-48f8-8ab2-aa2b6140d709\",\"moduleSequenceNumber\":160809}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///cc223d38-9b6c-469b-9d50-ead2d56ad6f8\",\"moduleSequenceNumber\":366736}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":366736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///18f23774-8050-4ab1-8b5b-2402f3177348\",\"moduleSequenceNumber\":313496}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":313496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c5a5ee31-2a9f-41a1-823c-993fa09ce0a0\",\"moduleSequenceNumber\":313552}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":313552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":366657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///b04cd020-5f43-47f1-b5fc-9a653cc545d5\",\"moduleSequenceNumber\":452847}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":452847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///e99212e0-3949-4d3d-b663-0ff03973b35a\",\"moduleSequenceNumber\":1048908}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":1048908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7.602,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668610.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"341310176\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"60.9.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[119222233,1378,1430,1573]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28550.850997833473,\"onlineMoneyMade\":119222233,\"onlineRunningTime\":68411.40999994034,\"pid\":2227,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///77983718-f98f-49ec-acdc-5cee73232b29\",\"moduleSequenceNumber\":313521}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///fe8fde32-a34d-467f-acda-2fb7cb2cc21f\",\"moduleSequenceNumber\":366510}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":366510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///659d8485-205e-48d5-bf5f-58523255facb\",\"moduleSequenceNumber\":298739}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":298739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///9f085107-c121-42e4-9def-4e1da4fa633f\",\"moduleSequenceNumber\":820}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///02fc4204-59a9-4117-9c71-7cbc860fdacb\",\"moduleSequenceNumber\":298814}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":298814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///03a6f987-1f00-4606-8f29-0b5319f6c0ed\",\"moduleSequenceNumber\":160797}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///e0ce9420-d1a5-4a2d-bd11-ee4bf9d280e3\",\"moduleSequenceNumber\":366659}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":366659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///69c13e32-6bf1-440a-a3ad-d8a487bafa57\",\"moduleSequenceNumber\":313465}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":313465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///77983718-f98f-49ec-acdc-5cee73232b29\",\"moduleSequenceNumber\":313521}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":313521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":366504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///f3e93f3d-2ea2-4e4b-a009-d9cd266099f3\",\"moduleSequenceNumber\":452685}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":452685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3bf33602-c82a-423b-b0f3-ad272ca50a61\",\"moduleSequenceNumber\":1048886}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1048886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"99.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,364,533,624]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18190.803973014525,\"onlineMoneyMade\":0,\"onlineRunningTime\":68411.40999994034,\"pid\":2229,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///7da31a91-fb77-46ee-9a42-a42121e56818\",\"moduleSequenceNumber\":313551}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///0312144c-e75b-410e-8b38-424fe992a7ef\",\"moduleSequenceNumber\":366651}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":366651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///07891de6-9ad7-4976-b16d-26251c3a75c4\",\"moduleSequenceNumber\":298771}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":298771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///1e22724e-d6a3-457d-bdd6-48921abac213\",\"moduleSequenceNumber\":821}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///28d72d9f-2dd8-466e-835a-f7cf67ce5948\",\"moduleSequenceNumber\":298844}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":298844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///abb8eff0-3f28-49d3-9017-03169f65fc03\",\"moduleSequenceNumber\":160807}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///08108ca2-2cc3-459b-b22f-e04c6356d6c0\",\"moduleSequenceNumber\":366710}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":366710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///49e1f9ed-91c6-4dfd-a6d8-23273ae7019a\",\"moduleSequenceNumber\":313495}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":313495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///7da31a91-fb77-46ee-9a42-a42121e56818\",\"moduleSequenceNumber\":313551}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":313551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":366650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///fb781106-0b92-4441-9040-d379eb5eb9ae\",\"moduleSequenceNumber\":452840}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":452840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3646b8e3-7bec-43c5-a352-93af285bc24e\",\"moduleSequenceNumber\":1048889}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":1048889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":32,\"hackDifficulty\":100,\"minDifficulty\":11,\"moneyAvailable\":1598977075,\"moneyMax\":1598977075,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":196,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"99.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":366703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":366704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":313217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":313218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":366706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":452894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1048880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":100,\"minDifficulty\":12,\"moneyAvailable\":1072151950,\"moneyMax\":1072151950,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":260,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908579.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,27,103,30,20,199,101],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-436012.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a(((aa\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"87.1.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[303653480,1118,1105,1209]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37162.009852758136,\"onlineMoneyMade\":303653480,\"onlineRunningTime\":68411.40999994034,\"pid\":2232,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///1693c702-de96-4a16-abe5-8eda9f63ded7\",\"moduleSequenceNumber\":313524}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///f74d26ad-6f56-46ea-8405-6c60f813cfe3\",\"moduleSequenceNumber\":366525}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":366525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///aac7876c-b574-4800-a1f5-d1cd8265d91a\",\"moduleSequenceNumber\":298743}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":298743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///b801d8cc-5253-4a17-a98d-af04e1fabd4c\",\"moduleSequenceNumber\":822}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simp.js\",\"url\":\"blob:file:///f9370859-8ee7-42c4-9efe-2a82861aca96\",\"moduleSequenceNumber\":1226}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6c381c4f-0400-4986-8f9d-1d0ed7484d75\",\"moduleSequenceNumber\":298817}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":298817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///a9def132-b938-489a-ab85-d3d92b7b19bd\",\"moduleSequenceNumber\":160803}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///7072e8c1-6d7c-4297-b34b-36c81da9db36\",\"moduleSequenceNumber\":366667}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":366667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///73a39c11-3012-4ee5-b7df-d89fe62bf16f\",\"moduleSequenceNumber\":313468}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":313468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///1693c702-de96-4a16-abe5-8eda9f63ded7\",\"moduleSequenceNumber\":313524}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":313524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":366521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///daf1c14f-e50c-4f74-af19-ab8eb410bb4d\",\"moduleSequenceNumber\":452699}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":452699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///db1450ec-a76b-42b4-b2e0-a20185f56161\",\"moduleSequenceNumber\":1048898}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1048898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-149840-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[165,93,69,121,14,53,180,130,110,195,29,117,84,172,13,169,78,163,139,112,190,29,123,169,116,178,36,198],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638760.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,9,7,10,3,-10,1,5,0,-9,2,-6,-2,5,10,-2,-5,1,6,-2,1,3,-6,10,9,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340720-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,3,-7,1,-7,8,-9,-7,-9,-10,-6,8,9],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"84.9.2.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[17329580130,5512,19292,13568]},\"filename\":\"adv.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1494.2070202397113,\"offlineMoneyMade\":0,\"offlineRunningTime\":484.78499999999997,\"onlineExpGained\":823562.089444669,\"onlineMoneyMade\":17329580130,\"onlineRunningTime\":254292.81000202819,\"pid\":31,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":106,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///22f90a1f-5ebb-4d82-bee4-e215350c44b4\",\"moduleSequenceNumber\":190428}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///74cb7e24-2f71-40d4-94dc-7ea294361320\",\"moduleSequenceNumber\":823}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203881-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"160111212100\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"6.7.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"39.4.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":366801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":366802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":313377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":313378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":366808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":452995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1048933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-148903.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"24.6.9.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":546,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-34442.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,8],[2,6,4],[2,6,2,9],[9,6,6,1,7],[6,2,2,7,3,8],[9,4,5,6,2,4,7],[4,9,5,7,6,6,6,2],[5,2,7,9,2,3,9,3,2]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423105-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,5],[4,9,5],[4,1,4,5],[5,3,7,2,9],[8,7,9,4,2,4]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229304.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[36,40,45,73,125,137,180,83,6,1,43,135,39,29],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573237-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"26.5.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[713889228,90,108,84]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7071.569700618055,\"onlineMoneyMade\":713889228,\"onlineRunningTime\":68411.40999994034,\"pid\":2247,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":6,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///041c07ac-0c84-41e5-9aa3-bbcc508dcaa1\",\"moduleSequenceNumber\":313564}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///657989fe-3afc-4a8d-ab74-8cd282022990\",\"moduleSequenceNumber\":366775}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":366775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///f764251f-aee0-4109-9ba4-e325b160ec6b\",\"moduleSequenceNumber\":298799}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":298799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///09904c30-f479-42af-b267-7a24dfaedf42\",\"moduleSequenceNumber\":824}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fd1c1e73-ac83-4db7-9bc1-7a32c7a61317\",\"moduleSequenceNumber\":298857}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":298857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///a002cf1d-50bb-490f-9b25-605a8714c9fb\",\"moduleSequenceNumber\":160839}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///f8589db5-2230-4ac9-8d95-057a5c99551a\",\"moduleSequenceNumber\":366819}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":366819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///cec0bfb8-7344-449b-904e-24b506980d70\",\"moduleSequenceNumber\":313508}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":313508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///041c07ac-0c84-41e5-9aa3-bbcc508dcaa1\",\"moduleSequenceNumber\":313564}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":313564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":366774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///ec40173e-3b53-47fa-afde-03a4df342ccc\",\"moduleSequenceNumber\":452964}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":452964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///519706e0-ad0a-4020-ba50-e785fd97bce9\",\"moduleSequenceNumber\":1048934}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1048934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734314.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":164712518,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"94.7.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[3590492367,636,954,742]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57733.295055803515,\"onlineMoneyMade\":3590492367,\"onlineRunningTime\":68411.40999994034,\"pid\":2245,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":53,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a2ce2bea-3f06-464c-a3bb-73edcdf244ae\",\"moduleSequenceNumber\":313557}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///9d453de9-e5ac-4ed1-b506-c9aaac5f16e0\",\"moduleSequenceNumber\":366735}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":366735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///531b454b-6bc6-4f49-bffc-466142e9559c\",\"moduleSequenceNumber\":298788}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":298788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///9585e1f5-a12e-4792-8dc9-f520ac038619\",\"moduleSequenceNumber\":825}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///d790e21f-eb87-439d-8abc-ab86514e3b2e\",\"moduleSequenceNumber\":11913}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2f7d86f8-72f9-421c-80dc-7a47dc78b7f6\",\"moduleSequenceNumber\":298850}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":298850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///48dc5e98-0be4-4fb8-b723-c5107faa7380\",\"moduleSequenceNumber\":160825}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///2c1f46e7-8339-40f9-9d25-6be745657075\",\"moduleSequenceNumber\":366776}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":366776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///f8de7700-b343-4eda-bb54-a50c71b15789\",\"moduleSequenceNumber\":313501}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":313501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a2ce2bea-3f06-464c-a3bb-73edcdf244ae\",\"moduleSequenceNumber\":313557}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":313557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":366732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///f4cda317-7eab-4213-95e3-0ac259ec9797\",\"moduleSequenceNumber\":452924}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":452924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///fc285961-fa99-4170-b094-8ebcb0667ebc\",\"moduleSequenceNumber\":1048926}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1048926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258411-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,7],[17,25],[11,12],[13,17],[5,10]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532697.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"58.5.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19729.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a)a()())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"54.8.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///5f60f457-248f-4ef3-853c-c5f9ceeacfb1\",\"moduleSequenceNumber\":366664}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":366664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\ttry { await ns.hack(name); }\\n\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t}\\n}\",\"filename\":\"simp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('remote.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\t// var simpR = ns.getScriptRam('simp.js');\\n\\n\\t// only adv if possible\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n\\n\\t// adv:simp  1:3\\n\\t// var sets = Math.floor(ram / (1 * advR + 3 * simpR));\\n\\t// if (sets == 0) {\\n\\t// \\tns.run('adv.js', 1, name);\\n\\t// \\tns.spawn('simp.js', (ram - advR) / simpR, name);\\n\\t// }\\n\\t// else {\\n\\t// \\tns.run('adv.js', 1 * sets, name);\\n\\t// \\tns.spawn('simp.js', 3 * sets, name);\\n\\t// }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stats.js\",\"url\":\"blob:file:///3dce7e9f-f76b-4a46-ae04-a8bc72771c64\",\"moduleSequenceNumber\":160811}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":366661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":313165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":313166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":366663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///49db6611-b3c4-423b-8b62-ff109c178e91\",\"moduleSequenceNumber\":452853}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":452853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":1048884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155037-Joe'sGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"14277231\",90],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204872-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[16,17,136,158,40,157,123,159,122,38,99,68,42],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"93.3.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"22.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-913965-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,20],[19,29],[16,22],[15,19]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-448755.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"969421178\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"87.8.1.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":366522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Usage: `run stats.js home home`\\n * This script recursively kills all processes on all servers. The `start` command must be used after running.\\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\tvar parent = ns.args[1];\\n\\tvar children = ns.scan(name);\\n\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child.includes('home') || child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);  // open ports so able to recurse into its children\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\n\\t\\tvar info = '';\\n\\t\\tinfo += child + ',';\\n\\t\\tinfo += '' + ns.getServerRequiredHackingLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerNumPortsRequired(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMinSecurityLevel(child) + ',';\\n\\t\\tinfo += '' + ns.getServerMaxMoney(child);\\n\\t\\tns.tprint(info);\\n\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp('stats.js', child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('stats.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('stats.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Cannot recurse into: ', child);  // not enough ports\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":366523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":312927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":312928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":366526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":452700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":1048897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-0\",\"httpPortOpen\":true,\"ip\":\"29.8.2.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[207800540465,6116684,7427402,6116684]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":525337936.6892954,\"onlineMoneyMade\":207800540465,\"onlineRunningTime\":68411.40999994034,\"pid\":2239,\"ramUsage\":2.4,\"server\":\"home-0\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c64317f4-e636-4ac4-9b0c-b00ab651d75c\",\"moduleSequenceNumber\":313543}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///98ca7f25-7517-44c1-b79d-6eb07f226d27\",\"moduleSequenceNumber\":298762}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-0\",\"moduleSequenceNumber\":298762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///41595a41-2453-4a69-86ed-44b6d2d17f58\",\"moduleSequenceNumber\":298836}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-0\",\"moduleSequenceNumber\":298836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///c4b0d182-af11-45c3-9698-a36174ca3e82\",\"moduleSequenceNumber\":298864}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-0\",\"moduleSequenceNumber\":298864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///2a461e01-c2f2-45b6-8b4d-3e1bbec0214f\",\"moduleSequenceNumber\":845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-0\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///ab0275aa-fad4-402b-a263-0bed55e5ced3\",\"moduleSequenceNumber\":366621}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-0\",\"moduleSequenceNumber\":366621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///e3e16892-ab72-4f9e-9e97-6119b904d443\",\"moduleSequenceNumber\":366686}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-0\",\"moduleSequenceNumber\":366686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///28285994-3441-40a4-a615-62a11d229592\",\"moduleSequenceNumber\":313487}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-0\",\"moduleSequenceNumber\":313487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///c64317f4-e636-4ac4-9b0c-b00ab651d75c\",\"moduleSequenceNumber\":313543}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-0\",\"moduleSequenceNumber\":313543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///02aac5e7-23fd-428b-9a54-df78ae7e0e8c\",\"moduleSequenceNumber\":452798}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-0\",\"moduleSequenceNumber\":452798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///09dcdaab-b51c-41db-a7d6-3ef63d308cc7\",\"moduleSequenceNumber\":1048912}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-0\",\"moduleSequenceNumber\":1048912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-1\",\"httpPortOpen\":true,\"ip\":\"78.6.0.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[252113729955,7427402,7864308,7427402]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":524517536.78911316,\"onlineMoneyMade\":252113729955,\"onlineRunningTime\":68411.40999994034,\"pid\":2242,\"ramUsage\":2.4,\"server\":\"home-1\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///eb2570bf-085b-463d-bc65-7742c70a5ea5\",\"moduleSequenceNumber\":313544}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///95a4ce46-d469-44a7-b496-facd0c160e81\",\"moduleSequenceNumber\":298763}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-1\",\"moduleSequenceNumber\":298763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4edebe86-cb4a-40a4-86e7-39121043a745\",\"moduleSequenceNumber\":298837}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-1\",\"moduleSequenceNumber\":298837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///5143693d-ab9b-47d5-834e-e54ff3c78abc\",\"moduleSequenceNumber\":298865}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-1\",\"moduleSequenceNumber\":298865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///ddac75a2-dbab-42ae-821e-e7cfac674485\",\"moduleSequenceNumber\":846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-1\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///c86f179e-b7f0-4ca8-9b75-ba3fa8d7fb54\",\"moduleSequenceNumber\":366624}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-1\",\"moduleSequenceNumber\":366624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///2452aa0c-75b2-4c2c-a17d-2d978a5af20e\",\"moduleSequenceNumber\":366687}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-1\",\"moduleSequenceNumber\":366687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///ceeda6c5-f17a-4473-a7c9-3ca7a67d22de\",\"moduleSequenceNumber\":313488}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-1\",\"moduleSequenceNumber\":313488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///eb2570bf-085b-463d-bc65-7742c70a5ea5\",\"moduleSequenceNumber\":313544}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-1\",\"moduleSequenceNumber\":313544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///9351a981-759d-4e67-9b10-1ee6b572573a\",\"moduleSequenceNumber\":452803}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-1\",\"moduleSequenceNumber\":452803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///39302bb0-4a8e-4ee7-9177-651b3c8a0439\",\"moduleSequenceNumber\":1048918}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-1\",\"moduleSequenceNumber\":1048918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-2\",\"httpPortOpen\":true,\"ip\":\"71.9.8.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[154648538805,7864308,7864308,7864308]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":651439925.4341704,\"onlineMoneyMade\":154648538805,\"onlineRunningTime\":68411.40999994034,\"pid\":2244,\"ramUsage\":2.4,\"server\":\"home-2\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///bb4d3156-c396-4671-8df1-6e02aecf3ab3\",\"moduleSequenceNumber\":313545}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///bcf0639c-2798-4ad7-b555-c40fa37dfbf5\",\"moduleSequenceNumber\":298764}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-2\",\"moduleSequenceNumber\":298764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5c517a19-df8d-4f8f-87be-83d41f37cfb6\",\"moduleSequenceNumber\":298838}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-2\",\"moduleSequenceNumber\":298838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///f5177ddd-f301-4e14-9fdc-974c86afa8d0\",\"moduleSequenceNumber\":847}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-2\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///5e8bdb9f-74c5-4e12-bfe1-fa1c5dc821ee\",\"moduleSequenceNumber\":6395}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-2\",\"moduleSequenceNumber\":6395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///bfafd09e-15f3-4e86-99c0-a1ab0620c34c\",\"moduleSequenceNumber\":366627}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-2\",\"moduleSequenceNumber\":366627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///be42ffb2-beb6-4ae6-9749-bac374bdcc8e\",\"moduleSequenceNumber\":366688}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-2\",\"moduleSequenceNumber\":366688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///e4defe13-30f2-4870-920a-14b9a7698aee\",\"moduleSequenceNumber\":313489}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-2\",\"moduleSequenceNumber\":313489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///bb4d3156-c396-4671-8df1-6e02aecf3ab3\",\"moduleSequenceNumber\":313545}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-2\",\"moduleSequenceNumber\":313545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///b417b6e8-40ee-4206-b8f6-1b73062e7fbd\",\"moduleSequenceNumber\":452808}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-2\",\"moduleSequenceNumber\":452808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///497e3960-7275-4b37-b38a-17f05ece9b7a\",\"moduleSequenceNumber\":1048924}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-2\",\"moduleSequenceNumber\":1048924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-3\",\"httpPortOpen\":true,\"ip\":\"77.2.9.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[167084758788,7864308,8301214,7864308]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":775483412.8363131,\"onlineMoneyMade\":167084758788,\"onlineRunningTime\":68411.40999994034,\"pid\":2246,\"ramUsage\":2.4,\"server\":\"home-3\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///2cc2ff7a-766b-4f67-9faa-904d4f833a25\",\"moduleSequenceNumber\":313546}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///9184d99d-841a-4fa8-9614-1ab85dbcaa86\",\"moduleSequenceNumber\":298765}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-3\",\"moduleSequenceNumber\":298765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d39e10a7-5363-4161-993b-e454473166e3\",\"moduleSequenceNumber\":298839}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-3\",\"moduleSequenceNumber\":298839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///41a7ae64-1179-4d0f-908d-08064d2e988e\",\"moduleSequenceNumber\":848}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-3\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///ea63bd34-69cf-4da2-aaa9-b42ba474f188\",\"moduleSequenceNumber\":6396}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-3\",\"moduleSequenceNumber\":6396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///2abe4218-fbb8-4fd8-b474-a0f40b65ebc4\",\"moduleSequenceNumber\":366630}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-3\",\"moduleSequenceNumber\":366630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///9b919dc3-57c4-4eca-907d-36531f7f09fe\",\"moduleSequenceNumber\":366689}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-3\",\"moduleSequenceNumber\":366689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///2f4e8879-ec13-42d0-9e59-8f2b11cc13ff\",\"moduleSequenceNumber\":313490}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-3\",\"moduleSequenceNumber\":313490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///2cc2ff7a-766b-4f67-9faa-904d4f833a25\",\"moduleSequenceNumber\":313546}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-3\",\"moduleSequenceNumber\":313546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///c833766b-4c46-4173-968a-f65763ce3968\",\"moduleSequenceNumber\":452813}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-3\",\"moduleSequenceNumber\":452813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///3481a2f3-40f3-4570-80b7-1d103971770b\",\"moduleSequenceNumber\":1048930}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-3\",\"moduleSequenceNumber\":1048930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-4\",\"httpPortOpen\":true,\"ip\":\"70.1.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[231763525823,8301214,8738120,8301214]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":724022569.6134429,\"onlineMoneyMade\":231763525823,\"onlineRunningTime\":68411.40999994034,\"pid\":2249,\"ramUsage\":2.4,\"server\":\"home-4\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///2a12217a-7158-4b67-842d-ef53d97ba003\",\"moduleSequenceNumber\":313547}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///80a89436-b7e2-4199-a37b-08b555d08b18\",\"moduleSequenceNumber\":298766}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-4\",\"moduleSequenceNumber\":298766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2ebd3c12-b1ad-4b84-94fd-4542859d66d5\",\"moduleSequenceNumber\":298840}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-4\",\"moduleSequenceNumber\":298840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///d9211949-6d8a-43d0-844c-e5dbf9bb7972\",\"moduleSequenceNumber\":849}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-4\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///6e1207da-cae4-45ea-a884-95d1df2720a1\",\"moduleSequenceNumber\":6397}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-4\",\"moduleSequenceNumber\":6397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///c72979db-5880-4768-9039-def62148d325\",\"moduleSequenceNumber\":366633}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-4\",\"moduleSequenceNumber\":366633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///b0912cd5-e6b1-49bc-a447-dd7507881313\",\"moduleSequenceNumber\":366690}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-4\",\"moduleSequenceNumber\":366690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///1f5ab11f-65f5-4eae-ae1f-9d268963e6e1\",\"moduleSequenceNumber\":313491}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-4\",\"moduleSequenceNumber\":313491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///2a12217a-7158-4b67-842d-ef53d97ba003\",\"moduleSequenceNumber\":313547}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-4\",\"moduleSequenceNumber\":313547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///2994161d-6f86-4a99-8235-5cb4e5abcba1\",\"moduleSequenceNumber\":452818}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-4\",\"moduleSequenceNumber\":452818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///bde43f8d-28be-413c-aafe-f69e49a46ed5\",\"moduleSequenceNumber\":1048937}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-4\",\"moduleSequenceNumber\":1048937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-5\",\"httpPortOpen\":true,\"ip\":\"66.2.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[102753296988,8738120,8738120,8738120]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":602558775.5811416,\"onlineMoneyMade\":102753296988,\"onlineRunningTime\":68411.40999994034,\"pid\":2253,\"ramUsage\":2.4,\"server\":\"home-5\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ce29bf05-f19f-48ea-9592-eb013303ee91\",\"moduleSequenceNumber\":313548}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///39715449-51fc-462d-a668-d16d3ac8a697\",\"moduleSequenceNumber\":298767}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-5\",\"moduleSequenceNumber\":298767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3076ccdb-6de6-4faa-bda9-8b09a034cfe6\",\"moduleSequenceNumber\":298841}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-5\",\"moduleSequenceNumber\":298841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///122a96d2-cc0b-4e69-8ea7-bdb8aa3cbf7f\",\"moduleSequenceNumber\":850}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-5\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///171b9421-8491-459a-b49d-e0197cb59178\",\"moduleSequenceNumber\":6398}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-5\",\"moduleSequenceNumber\":6398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///8693468d-4b01-49f4-91c4-ec3c1d4e0438\",\"moduleSequenceNumber\":366636}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-5\",\"moduleSequenceNumber\":366636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///6e7eb3ec-81b3-48c5-aa7c-e81663dfdd51\",\"moduleSequenceNumber\":366691}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-5\",\"moduleSequenceNumber\":366691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///e108ca4e-fe03-418b-9390-df4b8e0bee69\",\"moduleSequenceNumber\":313492}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-5\",\"moduleSequenceNumber\":313492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ce29bf05-f19f-48ea-9592-eb013303ee91\",\"moduleSequenceNumber\":313548}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-5\",\"moduleSequenceNumber\":313548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///dbee1279-88d7-4cf5-b49f-03577e8a9153\",\"moduleSequenceNumber\":452823}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-5\",\"moduleSequenceNumber\":452823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///f96f13cd-ca90-4ef0-aea9-f600c098cd59\",\"moduleSequenceNumber\":1048943}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-5\",\"moduleSequenceNumber\":1048943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-6\",\"httpPortOpen\":true,\"ip\":\"51.1.2.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[144064266648,9175026,9175026,9611932]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":715187785.0968128,\"onlineMoneyMade\":144064266648,\"onlineRunningTime\":68411.40999994034,\"pid\":2254,\"ramUsage\":2.4,\"server\":\"home-6\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///90ff2cb3-976a-430d-8857-84748c27e949\",\"moduleSequenceNumber\":313549}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///a6cbd6e7-0f4f-4049-a38b-ad6b24fa837d\",\"moduleSequenceNumber\":148571}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-6\",\"moduleSequenceNumber\":148571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\t\\n\\tvar children = ns.scan(name);\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tvar child = children[i];\\n\\t\\tif (child == parent) { continue; }\\n\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['setup.js', 'target.js', 'spawn.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\t\\n\\t\\t\\tvar small = ns.getScriptRam('setup.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('setup.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('target.js', name, 1, name);\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///0475742c-3a36-4555-882d-3e5e3753cd12\",\"moduleSequenceNumber\":366637}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-6\",\"moduleSequenceNumber\":366637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\tif (name != 'home') {  // don't loop on home (this script is used by setup, but home needs to run buyservs after setup and before looping.)\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {  // if there is money to be earned, the server will hack itself\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money (1.25b, 600m, 500m). for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\tothers.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('hack.js', 1, name, target);\\n\\t}\\n}\",\"filename\":\"loop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop.js\",\"url\":\"blob:file:///e7eff808-6b4b-4ea2-9f4d-15e25ff5148e\",\"moduleSequenceNumber\":298768}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-6\",\"moduleSequenceNumber\":298768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"adv.js\",\"url\":\"blob:file:///1fc6400b-3462-474a-8373-27d63f75d175\",\"moduleSequenceNumber\":298866}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-6\",\"moduleSequenceNumber\":298866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('hack.js');\\n\\tvar advR = ns.getScriptRam('adv.js');\\n\\n\\tvar sets = Math.floor(ram / advR);\\n\\tns.spawn('adv.js', sets, target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///74fbaafb-07c1-47df-87ad-4f52f9baebb3\",\"moduleSequenceNumber\":298842}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-6\",\"moduleSequenceNumber\":298842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Runs as many instances of adv as possible, with threading, on the machine [name], which must be the current machine.\\n * If [name] has no money, the machine is to instead target 'phantasy'.\\n * **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\n\\t// if (name != 'home') {\\n\\t\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\t\\tvar target = name;\\n\\t\\t}\\n\\t\\telse {  // targets on 'others' have a high max money. for now, they are manually chosen.\\n\\t\\t\\tvar others = [];\\n\\t\\t\\t\\n\\t\\t\\t// 3 ports open\\n\\t\\t\\t// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n\\t\\t\\t// 5 ports open\\n\\t\\t\\tfor (var i=0; i < 4; i++) others.push('catalyst');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('aevum-police');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push('netlink');\\n\\t\\t\\tfor (var i=0; i < 3; i++) others.push();\\n\\t\\t\\tfor (var i=0; i < 2; i++) others.push();\\n\\t\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\\n\\n\\t\\t\\t// More distributed\\n\\t\\t\\t// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n\\t\\t\\t// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n\\t\\t\\t// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n\\t\\t\\t// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n\\t\\t\\t// Less distributed\\n\\t\\t\\t// for (var i=0; i < 6; i++) others.push('catalyst');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('aevum-police');\\n\\t\\t\\t// for (var i=0; i < 4; i++) others.push('netlink');\\n\\t\\t\\t// for (var i=0; i < 3; i++) others.push('comptek');\\n\\t\\t\\t// for (var i=0; i < 2; i++) others.push('the-hub');\\n\\t\\t\\t// others.push('johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t\\t// 'phantasy', 'iron-gym');\\n\\t\\t\\t\\n\\t\\t\\tvar num = 0;\\n\\t\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\t\\tif (dash != -1) {\\n\\t\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t\\t}\\n\\t\\t\\tvar ind = num % others.length;\\n\\t\\t\\tvar target = others[ind];\\n\\t\\t}\\n\\t\\tns.spawn('spawn.js', 1, name, target);\\n\\t// }\\n}\",\"filename\":\"target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"target.js\",\"url\":\"blob:file:///118df390-b6c6-40f6-8d7e-d1da7fd355fa\",\"moduleSequenceNumber\":366692}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home-6\",\"moduleSequenceNumber\":366692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Should only be called by loop\\n**/\\nexport async function main(ns) {\\n\\tvar src = ns.args[0]\\n\\tvar target = ns.args[1];\\n\\tvar ram = ns.getServerMaxRam(src) - ns.getServerUsedRam(src) + ns.getScriptRam('spawn.js');\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\",\"filename\":\"spawn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spawn.js\",\"url\":\"blob:file:///598921f5-98a5-465c-b118-d41ce28cc63b\",\"moduleSequenceNumber\":313493}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home-6\",\"moduleSequenceNumber\":313493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///90ff2cb3-976a-430d-8857-84748c27e949\",\"moduleSequenceNumber\":313549}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-6\",\"moduleSequenceNumber\":313549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///1234102a-2a02-4207-b7f4-11ca61ad777b\",\"moduleSequenceNumber\":452826}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-6\",\"moduleSequenceNumber\":452826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///ff381350-38ef-43e0-8be4-3c38921f9b01\",\"moduleSequenceNumber\":1048946}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-6\",\"moduleSequenceNumber\":1048946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-7\",\"httpPortOpen\":true,\"ip\":\"75.0.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[151095523904,11359556,11359556,11359556]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":776380327.4356759,\"onlineMoneyMade\":151095523904,\"onlineRunningTime\":68411.40999994034,\"pid\":2255,\"ramUsage\":2.4,\"server\":\"home-7\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a6c2edcd-fe30-4a00-8b2c-e9ae71e96358\",\"moduleSequenceNumber\":852264}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///da432492-789e-4f51-aa1f-296f95f08f67\",\"moduleSequenceNumber\":957248}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-7\",\"moduleSequenceNumber\":957248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///cc265340-b516-4f12-b03c-749b7c3bd996\",\"moduleSequenceNumber\":1048950}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-7\",\"moduleSequenceNumber\":1048950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a6c2edcd-fe30-4a00-8b2c-e9ae71e96358\",\"moduleSequenceNumber\":852264}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-7\",\"moduleSequenceNumber\":852264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///54272c9b-ede4-4327-864c-087dd4ab04be\",\"moduleSequenceNumber\":858675}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-7\",\"moduleSequenceNumber\":858675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-8\",\"httpPortOpen\":true,\"ip\":\"56.6.9.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[129628158852,13107180,13107180,13107180]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":729836133.65335,\"onlineMoneyMade\":129628158852,\"onlineRunningTime\":68411.40999994034,\"pid\":2257,\"ramUsage\":2.4,\"server\":\"home-8\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ac425d58-0596-4a75-995c-caecaa12bcd9\",\"moduleSequenceNumber\":852265}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///bef72c4e-e359-4eb9-92af-9117f5c4e948\",\"moduleSequenceNumber\":957249}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-8\",\"moduleSequenceNumber\":957249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///4ca65cf6-2079-435e-a9c1-5d87532f56f4\",\"moduleSequenceNumber\":1048955}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-8\",\"moduleSequenceNumber\":1048955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ac425d58-0596-4a75-995c-caecaa12bcd9\",\"moduleSequenceNumber\":852265}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-8\",\"moduleSequenceNumber\":852265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///08502882-740f-419b-a8dc-75dff06dba03\",\"moduleSequenceNumber\":858676}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-8\",\"moduleSequenceNumber\":858676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-9\",\"httpPortOpen\":true,\"ip\":\"27.0.7.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[61987448875,13544086,13544086,13544086]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1085348822.6430576,\"onlineMoneyMade\":61987448875,\"onlineRunningTime\":68411.20999994034,\"pid\":2260,\"ramUsage\":2.4,\"server\":\"home-9\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///21a9492b-7cbc-4173-88d3-2fb2d7e689e7\",\"moduleSequenceNumber\":852266}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///32de6e04-2bd5-4fc4-97a0-3ad944ef3133\",\"moduleSequenceNumber\":957250}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-9\",\"moduleSequenceNumber\":957250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///5d5448fe-83bf-4bb8-a24a-2756b087e200\",\"moduleSequenceNumber\":1048960}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-9\",\"moduleSequenceNumber\":1048960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///21a9492b-7cbc-4173-88d3-2fb2d7e689e7\",\"moduleSequenceNumber\":852266}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-9\",\"moduleSequenceNumber\":852266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///964798a7-b1a9-4662-8483-e71155898d32\",\"moduleSequenceNumber\":858677}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-9\",\"moduleSequenceNumber\":858677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-10\",\"httpPortOpen\":true,\"ip\":\"95.8.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[37525318250,15291710,15291710,15291710]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":735794458.1282475,\"onlineMoneyMade\":37525318250,\"onlineRunningTime\":68411.20999994034,\"pid\":2261,\"ramUsage\":2.4,\"server\":\"home-10\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e1560508-15b6-4e7b-9b52-a120ef8245be\",\"moduleSequenceNumber\":852267}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///54d803e2-f3a5-44fe-b696-3912cd098cd8\",\"moduleSequenceNumber\":957251}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-10\",\"moduleSequenceNumber\":957251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///e70926bb-6e04-4e4a-93ed-d4fc97d085bb\",\"moduleSequenceNumber\":1048962}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-10\",\"moduleSequenceNumber\":1048962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e1560508-15b6-4e7b-9b52-a120ef8245be\",\"moduleSequenceNumber\":852267}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-10\",\"moduleSequenceNumber\":852267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///64772007-2e22-43ba-a8ff-f8a8bd86191f\",\"moduleSequenceNumber\":858678}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-10\",\"moduleSequenceNumber\":858678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-11\",\"httpPortOpen\":true,\"ip\":\"56.2.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[75151922525,20534582,20534582,20534582]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":876230386.9328961,\"onlineMoneyMade\":75151922525,\"onlineRunningTime\":68411.20999994034,\"pid\":2262,\"ramUsage\":2.4,\"server\":\"home-11\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///128eed57-f9de-47ea-ab23-a2f83b32c90c\",\"moduleSequenceNumber\":852268}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///668cb4c2-fd9e-42ea-99c4-039810b036fb\",\"moduleSequenceNumber\":957252}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-11\",\"moduleSequenceNumber\":957252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///cae6bd7c-9531-42af-b7b9-10e0395077df\",\"moduleSequenceNumber\":1048964}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-11\",\"moduleSequenceNumber\":1048964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///128eed57-f9de-47ea-ab23-a2f83b32c90c\",\"moduleSequenceNumber\":852268}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-11\",\"moduleSequenceNumber\":852268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///b6bff030-e238-4cd4-bd3b-db24f27f149e\",\"moduleSequenceNumber\":858679}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-11\",\"moduleSequenceNumber\":858679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-12\",\"httpPortOpen\":true,\"ip\":\"68.0.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[68702971680,27088172,27088172,27088172]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1111313513.6836014,\"onlineMoneyMade\":68702971680,\"onlineRunningTime\":68411.20999994034,\"pid\":2263,\"ramUsage\":2.4,\"server\":\"home-12\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///af301f37-85c0-46fd-bef6-79ce58aa50c8\",\"moduleSequenceNumber\":852269}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///69a6e7dd-fabf-48a4-a8d2-535264ad8318\",\"moduleSequenceNumber\":957253}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-12\",\"moduleSequenceNumber\":957253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///33d9a53c-43e8-4326-a11f-b6eed0fa344e\",\"moduleSequenceNumber\":1048966}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-12\",\"moduleSequenceNumber\":1048966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///af301f37-85c0-46fd-bef6-79ce58aa50c8\",\"moduleSequenceNumber\":852269}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-12\",\"moduleSequenceNumber\":852269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///b62197ed-d282-4c9d-80b5-6d9598f798b6\",\"moduleSequenceNumber\":858680}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-12\",\"moduleSequenceNumber\":858680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-13\",\"httpPortOpen\":true,\"ip\":\"31.8.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[56891680542,41506070,41069164,41506070]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1239466599.4309826,\"onlineMoneyMade\":56891680542,\"onlineRunningTime\":68411.20999994034,\"pid\":2264,\"ramUsage\":2.4,\"server\":\"home-13\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///6b637779-aa70-45a2-b3a5-c3f9c7cf38f8\",\"moduleSequenceNumber\":852270}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///d59e9f3d-6e54-4c43-a691-038b47b24aac\",\"moduleSequenceNumber\":957254}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-13\",\"moduleSequenceNumber\":957254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///d93b4f3c-3450-4bec-81b7-77171c1d006b\",\"moduleSequenceNumber\":1048968}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-13\",\"moduleSequenceNumber\":1048968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///6b637779-aa70-45a2-b3a5-c3f9c7cf38f8\",\"moduleSequenceNumber\":852270}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-13\",\"moduleSequenceNumber\":852270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///24d63d73-be4f-4dd7-b3c0-217ffaee497b\",\"moduleSequenceNumber\":858681}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-13\",\"moduleSequenceNumber\":858681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-14\",\"httpPortOpen\":true,\"ip\":\"48.0.9.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[45696346520,40195352,40195352,40195352]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1644275462.2749462,\"onlineMoneyMade\":45696346520,\"onlineRunningTime\":68411.20999994034,\"pid\":2265,\"ramUsage\":2.4,\"server\":\"home-14\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///f3372df3-a78b-45b3-a43a-4a9d62609042\",\"moduleSequenceNumber\":852271}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///5200308b-cb2d-4b92-b397-f65d1e63ca10\",\"moduleSequenceNumber\":957255}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-14\",\"moduleSequenceNumber\":957255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///26abb4b1-1cc3-449b-a2c4-29520d47c90f\",\"moduleSequenceNumber\":1048970}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-14\",\"moduleSequenceNumber\":1048970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///f3372df3-a78b-45b3-a43a-4a9d62609042\",\"moduleSequenceNumber\":852271}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-14\",\"moduleSequenceNumber\":852271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///07359fff-ac63-4b15-a88c-778b13c589ee\",\"moduleSequenceNumber\":858682}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-14\",\"moduleSequenceNumber\":858682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-15\",\"httpPortOpen\":true,\"ip\":\"80.6.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[29880777767,52428720,52428720,52428720]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1300890851.8277924,\"onlineMoneyMade\":29880777767,\"onlineRunningTime\":68411.20999994034,\"pid\":2266,\"ramUsage\":2.4,\"server\":\"home-15\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ca5ec3e6-1541-479a-90d4-1129be3c1d4b\",\"moduleSequenceNumber\":852272}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///973d3c16-8179-4ae0-a85f-d7ab13f5ecff\",\"moduleSequenceNumber\":957256}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-15\",\"moduleSequenceNumber\":957256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///90e3f2d1-ea7a-484c-8210-eaf4486fa453\",\"moduleSequenceNumber\":1048972}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-15\",\"moduleSequenceNumber\":1048972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ca5ec3e6-1541-479a-90d4-1129be3c1d4b\",\"moduleSequenceNumber\":852272}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-15\",\"moduleSequenceNumber\":852272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///e8db1886-5e15-4558-990a-1cd1ada39228\",\"moduleSequenceNumber\":858683}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-15\",\"moduleSequenceNumber\":858683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-16\",\"httpPortOpen\":true,\"ip\":\"25.3.5.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[23163064723,54176344,54176344,54176344]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1913421111.042155,\"onlineMoneyMade\":23163064723,\"onlineRunningTime\":68411.20999994034,\"pid\":2267,\"ramUsage\":2.4,\"server\":\"home-16\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///aa4b9f99-4bba-4c92-be76-d0b6c716d2cf\",\"moduleSequenceNumber\":852273}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///0872fb03-02ac-41e2-9775-1872458cbbe6\",\"moduleSequenceNumber\":957257}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-16\",\"moduleSequenceNumber\":957257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///54c74bdb-36bd-4865-84d9-386b1db6f685\",\"moduleSequenceNumber\":1048974}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-16\",\"moduleSequenceNumber\":1048974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///aa4b9f99-4bba-4c92-be76-d0b6c716d2cf\",\"moduleSequenceNumber\":852273}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-16\",\"moduleSequenceNumber\":852273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///0e675cde-31b1-4ea7-a4c3-2f835f4ae914\",\"moduleSequenceNumber\":858684}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-16\",\"moduleSequenceNumber\":858684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-17\",\"httpPortOpen\":true,\"ip\":\"43.9.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[22665349343,79516892,79516892,79516892]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2804481308.6560354,\"onlineMoneyMade\":22665349343,\"onlineRunningTime\":68411.20999994034,\"pid\":2268,\"ramUsage\":2.4,\"server\":\"home-17\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a6b504a3-b667-45e0-9a8a-b3d72a420728\",\"moduleSequenceNumber\":852274}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///dbd73361-eb6b-47bd-b545-d7f9ae0fca72\",\"moduleSequenceNumber\":957258}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-17\",\"moduleSequenceNumber\":957258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///58a7e1f1-c351-4801-9b77-3097c4c35de6\",\"moduleSequenceNumber\":1048976}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-17\",\"moduleSequenceNumber\":1048976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///a6b504a3-b667-45e0-9a8a-b3d72a420728\",\"moduleSequenceNumber\":852274}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-17\",\"moduleSequenceNumber\":852274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///1a49b18f-8e9c-421f-9c30-8aeff2a576dd\",\"moduleSequenceNumber\":858685}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-17\",\"moduleSequenceNumber\":858685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-18\",\"httpPortOpen\":true,\"ip\":\"32.3.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[23481194542,102672910,102672910,102672910]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2535482858.5899816,\"onlineMoneyMade\":23481194542,\"onlineRunningTime\":68411.20999994034,\"pid\":2269,\"ramUsage\":2.4,\"server\":\"home-18\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///df0a9ced-ffcb-4f8a-b5f0-7148783b45bd\",\"moduleSequenceNumber\":852275}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///d9ceecbd-35b2-4889-8f21-f479bd5695cd\",\"moduleSequenceNumber\":957259}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-18\",\"moduleSequenceNumber\":957259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///09634a6d-3976-40b5-8d27-7ced518ff838\",\"moduleSequenceNumber\":1048978}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-18\",\"moduleSequenceNumber\":1048978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///df0a9ced-ffcb-4f8a-b5f0-7148783b45bd\",\"moduleSequenceNumber\":852275}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-18\",\"moduleSequenceNumber\":852275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///df7930c8-f12e-4d9d-a2d7-817aabdf4b04\",\"moduleSequenceNumber\":858686}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-18\",\"moduleSequenceNumber\":858686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-19\",\"httpPortOpen\":true,\"ip\":\"78.0.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[22260903090,129761082,130197988,129761082]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3203846891.2783647,\"onlineMoneyMade\":22260903090,\"onlineRunningTime\":68411.20999994034,\"pid\":2270,\"ramUsage\":2.4,\"server\":\"home-19\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///bab31c05-27dd-4aca-9a75-95fb3565334e\",\"moduleSequenceNumber\":852276}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///a994fa0d-411f-43e1-b707-da9a18848db7\",\"moduleSequenceNumber\":957260}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-19\",\"moduleSequenceNumber\":957260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///cd97df15-ba28-4175-890d-a3a6d04f5dda\",\"moduleSequenceNumber\":1048980}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-19\",\"moduleSequenceNumber\":1048980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///bab31c05-27dd-4aca-9a75-95fb3565334e\",\"moduleSequenceNumber\":852276}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-19\",\"moduleSequenceNumber\":852276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///1a59f0c7-ce00-4b6d-8cbe-b3116ff08688\",\"moduleSequenceNumber\":858687}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-19\",\"moduleSequenceNumber\":858687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-20\",\"httpPortOpen\":true,\"ip\":\"25.7.0.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[28503502490,181315990,181752896,181315990]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5427821772.114111,\"onlineMoneyMade\":28503502490,\"onlineRunningTime\":68411.20999994034,\"pid\":2271,\"ramUsage\":2.4,\"server\":\"home-20\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e440b129-0a76-44f8-b3aa-cd2a1f18bd7f\",\"moduleSequenceNumber\":852277}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///405e2b39-d7d8-4ec0-b338-43c8915078c5\",\"moduleSequenceNumber\":957261}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-20\",\"moduleSequenceNumber\":957261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///c48f3fb6-79c4-4488-9c74-21c9b5b79e07\",\"moduleSequenceNumber\":1048982}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-20\",\"moduleSequenceNumber\":1048982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///e440b129-0a76-44f8-b3aa-cd2a1f18bd7f\",\"moduleSequenceNumber\":852277}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-20\",\"moduleSequenceNumber\":852277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///a8b1694c-21a7-4d7e-ace9-560a84cc9ce7\",\"moduleSequenceNumber\":858688}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-20\",\"moduleSequenceNumber\":858688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-21\",\"httpPortOpen\":true,\"ip\":\"25.9.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[45295569758,316756850,317193756,316756850]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7808032901.982925,\"onlineMoneyMade\":45295569758,\"onlineRunningTime\":68411.20999994034,\"pid\":2272,\"ramUsage\":2.4,\"server\":\"home-21\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0e63c387-5fa9-4323-bb84-2a255d0bd806\",\"moduleSequenceNumber\":852278}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///8ba6558b-fa41-4aaa-a7ac-04d4efd9a69b\",\"moduleSequenceNumber\":957262}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-21\",\"moduleSequenceNumber\":957262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///d375ba1c-1bf7-46b5-895e-4b52cf6ab077\",\"moduleSequenceNumber\":1048984}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-21\",\"moduleSequenceNumber\":1048984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///0e63c387-5fa9-4323-bb84-2a255d0bd806\",\"moduleSequenceNumber\":852278}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-21\",\"moduleSequenceNumber\":852278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///dc6b2210-e234-4275-9b0a-0ed08f4a5163\",\"moduleSequenceNumber\":858689}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-21\",\"moduleSequenceNumber\":858689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-22\",\"httpPortOpen\":true,\"ip\":\"52.9.1.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[65952500000,501131182,501568088,501131182]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9727276387.704926,\"onlineMoneyMade\":65952500000,\"onlineRunningTime\":68411.20999994034,\"pid\":2273,\"ramUsage\":2.4,\"server\":\"home-22\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///f87b0235-1234-4c70-88a9-2ef9a6c2614d\",\"moduleSequenceNumber\":852279}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///2bb43e77-8d03-40c1-ab71-4216198f9ba6\",\"moduleSequenceNumber\":957263}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-22\",\"moduleSequenceNumber\":957263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///e833f397-ee61-43b3-b78e-6a76fc1a2b93\",\"moduleSequenceNumber\":1048986}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-22\",\"moduleSequenceNumber\":1048986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///f87b0235-1234-4c70-88a9-2ef9a6c2614d\",\"moduleSequenceNumber\":852279}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-22\",\"moduleSequenceNumber\":852279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///3ee0dc80-3d00-452e-95ea-12cdb93fe331\",\"moduleSequenceNumber\":858690}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-22\",\"moduleSequenceNumber\":858690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-23\",\"httpPortOpen\":true,\"ip\":\"6.1.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[103550000000,904832326,905269232,904832326]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17561096883.55374,\"onlineMoneyMade\":103550000000,\"onlineRunningTime\":68411.20999994034,\"pid\":2274,\"ramUsage\":2.4,\"server\":\"home-23\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ad75341e-d476-4c5e-a508-d96d1494a833\",\"moduleSequenceNumber\":852280}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///2383e4f8-51da-44bb-8822-42c26b58668a\",\"moduleSequenceNumber\":957264}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-23\",\"moduleSequenceNumber\":957264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///a2d097fd-3131-4472-9ffe-29a45cd557c5\",\"moduleSequenceNumber\":1048988}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-23\",\"moduleSequenceNumber\":1048988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///ad75341e-d476-4c5e-a508-d96d1494a833\",\"moduleSequenceNumber\":852280}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-23\",\"moduleSequenceNumber\":852280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///43f5e86f-2f66-40b1-9d75-37af7e27f821\",\"moduleSequenceNumber\":858691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-23\",\"moduleSequenceNumber\":858691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"home-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home-24\",\"httpPortOpen\":true,\"ip\":\"43.2.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3639744573.749334,908764480,908764480,908764480]},\"filename\":\"hackgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9124449715.638222,\"onlineMoneyMade\":3639744573.749334,\"onlineRunningTime\":68411.20999994034,\"pid\":2276,\"ramUsage\":2.4,\"server\":\"home-24\",\"threads\":436906,\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///50d264a9-7773-402c-874e-8e38f8d5be15\",\"moduleSequenceNumber\":852281}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Breaks into child servers and initates setup process in them.\\n * Initiates the weaken-grow-hack loop in the current server.\\n**/\\nexport async function main(ns) {\\n\\tvar name;\\n\\tvar parent;\\n\\tif (ns.args.length == 0) {\\n\\t\\tname = ns.getHostname();\\n\\t\\tparent = ns.getHostname();\\n\\t}\\n\\telse {\\n\\t\\tname = ns.args[0];\\n\\t\\tparent = ns.args[1];\\n\\t}\\n\\tvar children = ns.scan(name);\\n\\tfor (let child of children) {\\n\\t\\tif (child == parent) { continue; }\\n\\t\\tns.brutessh(child);\\n\\t\\tns.ftpcrack(child);\\n\\t\\tns.relaysmtp(child);\\n\\t\\tns.httpworm(child);\\n\\t\\tns.sqlinject(child);\\n\\t\\t// automate backdoor if it ever takes less than 32G\\n\\t\\ttry {\\n\\t\\t\\tns.nuke(child);\\n\\t\\t\\tawait ns.scp(['branch.js', 'leaf.js', 'hackgw.js', 'weak.js'], child);\\n\\t\\t\\tns.killall(child);\\n\\t\\t\\tvar small = ns.getScriptRam('branch.js') > ns.getServerMaxRam(child);\\n\\t\\t\\tns.exec('branch.js', small ? name : child, 1, child, name);\\n\\t\\t} catch (error) {\\n\\t\\t\\tns.tprint('Not enough ports to nuke: ', child);  // not enough ports\\n\\t\\t}\\n\\t}\\n\\tns.exec('leaf.js', name, 1);\\n}\",\"filename\":\"branch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"branch.js\",\"url\":\"blob:file:///8ee1909a-8f59-4ff7-9b6f-3694aae2d2e4\",\"moduleSequenceNumber\":957265}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home-24\",\"moduleSequenceNumber\":957265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * Select a server to target depending on the host, and spawn as many threads as possible targeting it. \\n**/\\nexport async function main(ns) {\\n\\tvar name = ns.getHostname();\\n\\tif (ns.getServerMaxMoney(name) != 0) {\\n\\t\\tvar target = name;\\n\\t}\\n\\telse {\\n\\t\\tvar others = [];\\n\\t\\tothers.push('alpha-ent');\\n\\t\\tothers.push('rho-construction');\\n\\t\\tothers.push('summit-uni');\\n\\t\\tothers.push('aevum-police');\\n\\t\\tothers.push('catalyst');\\n\\t\\tothers.push('rothman-uni');\\n\\t\\tothers.push('netlink');\\n\\t\\tothers.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n\\t\\t'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net',\\n\\t\\t'joesguns', 'sigma-cosmetics', 'foodnstuff', 'n00dles');\\n\\t\\t\\n\\t\\tvar num = 0;\\n\\t\\tvar dash = name.lastIndexOf('-');\\n\\t\\tif (dash != -1) {\\n\\t\\t\\tvar numstr = Number(name.substring(dash + 1));\\n\\t\\t\\tif (!Number.isNaN(numstr)) num = numstr;\\n\\t\\t}\\n\\t\\tvar ind = num % others.length;\\n\\t\\tvar target = others[ind];\\n\\t}\\n\\n\\tvar ram = ns.getServerMaxRam(name);  //  - ns.getServerUsedRam(name) + ns.getScriptRam('leaf.js')\\n\\tvar hgw = ns.getScriptRam('hackgw.js');\\n\\tvar threads = Math.floor(ram / hgw);\\n\\tns.spawn('hackgw.js', threads, target);\\n}\\n\\n// For now, targets are manually chosen based on ports open, hack level, and max money.\\n\\n// 3 ports open\\n// others = ['comptek', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix', 'crush-fitness', 'phantasy', 'iron-gym'];\\n\\n// 5 ports open, more distributed\\n// others = ['catalyst', 'catalyst', 'aevum-police', 'aevum-police', 'netlink', 'netlink',\\n// \\t'comptek', 'comptek', 'the-hub', 'the-hub', 'johnson-ortho', 'omega-net', 'silver-helix',\\n// \\t'crush-fitness', 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi',\\n// \\t'hong-fang-tea', 'nectar-net', 'joesguns', 'sigma-cosmetics', 'foodnstuff'];\\n\\n// 5 ports open, higher level\\n// others.push('alpha-ent');\\n// others.push('alpha-ent');\\n// others.push('rho-construction');\\n// others.push('rho-construction');\\n// others.push('summit-uni');\\n// others.push('summit-uni');\\n// others.push('aevum-police');\\n// others.push('aevum-police');\\n// others.push('catalyst');\\n// others.push('catalyst');\\n// others.push('rothman-uni');\\n// others.push('netlink');\\n// others.push('netlink');\\n// others.push('comptek', 'the-hub', 'johnson-ortho', 'crush-fitness', 'omega-net', 'silver-helix',\\n// 'phantasy', 'iron-gym', 'max-hardware', 'zer0', 'neo-net', 'harakiri-sushi');\",\"filename\":\"leaf.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leaf.js\",\"url\":\"blob:file:///9a6a4e52-fe3a-4748-917c-7615b2a0d7dd\",\"moduleSequenceNumber\":1048990}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home-24\",\"moduleSequenceNumber\":1048990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar name = ns.args[0];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(name) > ns.getServerMinSecurityLevel(name) + 10)\\n\\t\\t\\tawait ns.weaken(name);\\n\\t\\telse if (ns.getServerMoneyAvailable(name) < ns.getServerMaxMoney(name) * 0.8)\\n\\t\\t\\tawait ns.grow(name);\\n\\t\\telse {\\n\\t\\t\\ttry { await ns.hack(name); }\\n\\t\\t\\tcatch (error) { await ns.sleep(1000 * 60 * 60) }  // hack skill not high enough\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hackgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackgw.js\",\"url\":\"blob:file:///50d264a9-7773-402c-874e-8e38f8d5be15\",\"moduleSequenceNumber\":852281}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home-24\",\"moduleSequenceNumber\":852281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true){\\n\\t\\tawait ns.weaken('foodnstuff');\\n\\t}\\n}\",\"filename\":\"weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weak.js\",\"url\":\"blob:file:///5a403e8c-b80d-4c47-b799-1c6ae4c45fb5\",\"moduleSequenceNumber\":858692}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home-24\",\"moduleSequenceNumber\":858692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":56.62678311032361,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":52.86188309642764,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":21.708584833985636,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":58.03153464490719,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":36.0665,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":75288.27186731235,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":48.44316737614385,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.2106,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":91.80875784588932,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":20.279011179463218,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":92.43350364984428,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":116.8308437221386,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":27.2697,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":32159.12041665835,\"favor\":1.8133,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":180932.28587120862}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":105340.89115780038}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":69414.02579493288}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":18588.563062838613}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":19.3983,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":130582.6198544144}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":7.0275,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":20410.11884602798}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":20.5909,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":46845.1654927778}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":67.6414,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":134921.01472372146}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"prof\":\"run ServerProfiler.exe\",\"me\":\"run fl1ght.exe\",\"co\":\"connect\",\"ka\":\"killall\",\"sa\":\"scan-analyze\",\"cheese\":\"killall;run weak.js -t 599186\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643290530420","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643290530464"}}